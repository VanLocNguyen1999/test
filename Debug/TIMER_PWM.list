
TIMER_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d8  080025d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025d8  080025d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d8  080025d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  080025ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080025ec  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007206  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001457  00000000  00000000  0002723b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  00028698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  00028f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014cb8  00000000  00000000  00029760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d31  00000000  00000000  0003e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f6c9  00000000  00000000  00047149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6812  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002440  00000000  00000000  000b6864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002598 	.word	0x08002598

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002598 	.word	0x08002598

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fb87 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8bb 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f9fb 	bl	8000918 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000522:	f000 f985 	bl	8000830 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000526:	f000 f8f1 	bl	800070c <MX_TIM1_Init>
  HBridge L293D_chanel1;
  HBridge L293D_chanel2;
  PWMController pwm1;
  PWMController pwm2;

  HBridge_Init(&L293D_chanel1, in1_pin1_Pin, in2_pin1_Pin, &pwm1);
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	f107 0018 	add.w	r0, r7, #24
 8000532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	f000 f833 	bl	80005a4 <HBridge_Init>
  HBridge_Init(&L293D_chanel2, in1_pin2_Pin, in2_pin2_Pin, &pwm2);
 800053e:	463b      	mov	r3, r7
 8000540:	f107 0010 	add.w	r0, r7, #16
 8000544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	f000 f82a 	bl	80005a4 <HBridge_Init>

  HAL_GPIO_WritePin(GPIOB,L293D_chanel1.in1_pin, 1);
 8000550:	8b3b      	ldrh	r3, [r7, #24]
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	4810      	ldr	r0, [pc, #64]	; (8000598 <main+0x88>)
 8000558:	f000 fe34 	bl	80011c4 <HAL_GPIO_WritePin>


  HBridge_Forward(&L293D_chanel1);
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f837 	bl	80005d4 <HBridge_Forward>
  HBridge_Forward(&L293D_chanel2);
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f832 	bl	80005d4 <HBridge_Forward>

  PWMController_Init(&pwm1, &htim1, TIM_CHANNEL_1, 1000, 0.2);
 8000570:	f107 0008 	add.w	r0, r7, #8
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <main+0x8c>)
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057c:	2200      	movs	r2, #0
 800057e:	4908      	ldr	r1, [pc, #32]	; (80005a0 <main+0x90>)
 8000580:	f000 f840 	bl	8000604 <PWMController_Init>
  PWMController_Init(&pwm2, &htim1, TIM_CHANNEL_2, 1000, 0.2);
 8000584:	4638      	mov	r0, r7
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <main+0x8c>)
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	2204      	movs	r2, #4
 8000590:	4903      	ldr	r1, [pc, #12]	; (80005a0 <main+0x90>)
 8000592:	f000 f837 	bl	8000604 <PWMController_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x86>
 8000598:	40010c00 	.word	0x40010c00
 800059c:	3e4ccccd 	.word	0x3e4ccccd
 80005a0:	20000028 	.word	0x20000028

080005a4 <HBridge_Init>:
  /* USER CODE END 3 */
}

/* USER CODE END WHILE */

void HBridge_Init(HBridge *hbridge, uint16_t in1_pin, uint16_t in2_pin, PWMController *pwm) {
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	460b      	mov	r3, r1
 80005b0:	817b      	strh	r3, [r7, #10]
 80005b2:	4613      	mov	r3, r2
 80005b4:	813b      	strh	r3, [r7, #8]

    hbridge->in1_pin = in1_pin;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	897a      	ldrh	r2, [r7, #10]
 80005ba:	801a      	strh	r2, [r3, #0]
    hbridge->in2_pin = in2_pin;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	893a      	ldrh	r2, [r7, #8]
 80005c0:	805a      	strh	r2, [r3, #2]
    hbridge->pwm = pwm;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	605a      	str	r2, [r3, #4]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
	...

080005d4 <HBridge_Forward>:
void HBridge_Forward(HBridge *hbridge) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB,hbridge->in1_pin, 1);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <HBridge_Forward+0x2c>)
 80005e6:	f000 fded 	bl	80011c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,hbridge->in2_pin, 0);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	885b      	ldrh	r3, [r3, #2]
 80005ee:	2200      	movs	r2, #0
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <HBridge_Forward+0x2c>)
 80005f4:	f000 fde6 	bl	80011c4 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010c00 	.word	0x40010c00

08000604 <PWMController_Init>:
    HAL_GPIO_WritePin(GPIOB,hbridge->in1_pin, 0);
    HAL_GPIO_WritePin(GPIOB,hbridge->in2_pin, 1);
}


void PWMController_Init(PWMController *pwm, TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency, float dutyCycle) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	603b      	str	r3, [r7, #0]

	pwm->htim = htim;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	601a      	str	r2, [r3, #0]
	pwm->htim->Instance->ARR = (HAL_RCC_GetPCLK2Freq() / frequency  );
 8000618:	f001 f9c4 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 800061c:	4601      	mov	r1, r0
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	fbb1 f2f2 	udiv	r2, r1, r2
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
    uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // Lấy tần số clock của Timer
 800062c:	f001 f9ba 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8000630:	61f8      	str	r0, [r7, #28]
    uint32_t prescaler = timerClock / frequency - 1;
 8000632:	69fa      	ldr	r2, [r7, #28]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	3b01      	subs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
    uint32_t pulse = (pwm->htim->Instance->ARR + 1) * dutyCycle;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	3301      	adds	r3, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fee9 	bl	8000420 <__aeabi_ui2f>
 800064e:	4603      	mov	r3, r0
 8000650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fd7a 	bl	800014c <__aeabi_fmul>
 8000658:	4603      	mov	r3, r0
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff38 	bl	80004d0 <__aeabi_f2uiz>
 8000660:	4603      	mov	r3, r0
 8000662:	617b      	str	r3, [r7, #20]
    pwm->channel = channel;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	605a      	str	r2, [r3, #4]
    pwm->htim->Init.Prescaler = prescaler;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	69ba      	ldr	r2, [r7, #24]
 8000670:	605a      	str	r2, [r3, #4]
    pwm->htim->Instance->CCR1 = pulse;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(pwm->htim, pwm->channel);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	4610      	mov	r0, r2
 8000688:	f001 fa16 	bl	8001ab8 <HAL_TIM_PWM_Start>
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b090      	sub	sp, #64	; 0x40
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 ff70 	bl	8002588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd92 	bl	80011f4 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006d6:	f000 f95f 	bl	8000998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 ffe2 	bl	80016bc <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f94b 	bl	8000998 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3740      	adds	r7, #64	; 0x40
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	; 0x40
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MX_TIM1_Init+0x11c>)
 8000744:	4a39      	ldr	r2, [pc, #228]	; (800082c <MX_TIM1_Init+0x120>)
 8000746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000748:	4b37      	ldr	r3, [pc, #220]	; (8000828 <MX_TIM1_Init+0x11c>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800074e:	4b36      	ldr	r3, [pc, #216]	; (8000828 <MX_TIM1_Init+0x11c>)
 8000750:	2260      	movs	r2, #96	; 0x60
 8000752:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <MX_TIM1_Init+0x11c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <MX_TIM1_Init+0x11c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <MX_TIM1_Init+0x11c>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MX_TIM1_Init+0x11c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076c:	482e      	ldr	r0, [pc, #184]	; (8000828 <MX_TIM1_Init+0x11c>)
 800076e:	f001 f978 	bl	8001a62 <HAL_TIM_PWM_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f90e 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000788:	4619      	mov	r1, r3
 800078a:	4827      	ldr	r0, [pc, #156]	; (8000828 <MX_TIM1_Init+0x11c>)
 800078c:	f001 fe93 	bl	80024b6 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000796:	f000 f8ff 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079a:	2360      	movs	r3, #96	; 0x60
 800079c:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	481a      	ldr	r0, [pc, #104]	; (8000828 <MX_TIM1_Init+0x11c>)
 80007c0:	f001 f9a2 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80007ca:	f000 f8e5 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2204      	movs	r2, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_TIM1_Init+0x11c>)
 80007d8:	f001 f996 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80007e2:	f000 f8d9 	bl	8000998 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM1_Init+0x11c>)
 800080a:	f001 fdfc 	bl	8002406 <HAL_TIMEx_ConfigBreakDeadTime>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000814:	f000 f8c0 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM1_Init+0x11c>)
 800081a:	f000 f92f 	bl	8000a7c <HAL_TIM_MspPostInit>

}
 800081e:	bf00      	nop
 8000820:	3740      	adds	r7, #64	; 0x40
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000028 	.word	0x20000028
 800082c:	40012c00 	.word	0x40012c00

08000830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_TIM2_Init+0xe4>)
 8000862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_TIM2_Init+0xe4>)
 800086a:	2203      	movs	r2, #3
 800086c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_TIM2_Init+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_TIM2_Init+0xe4>)
 8000876:	22c8      	movs	r2, #200	; 0xc8
 8000878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_TIM2_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_TIM2_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000886:	4823      	ldr	r0, [pc, #140]	; (8000914 <MX_TIM2_Init+0xe4>)
 8000888:	f001 f8c0 	bl	8001a0c <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000892:	f000 f881 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a0:	4619      	mov	r1, r3
 80008a2:	481c      	ldr	r0, [pc, #112]	; (8000914 <MX_TIM2_Init+0xe4>)
 80008a4:	f001 f9f6 	bl	8001c94 <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80008ae:	f000 f873 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008b2:	4818      	ldr	r0, [pc, #96]	; (8000914 <MX_TIM2_Init+0xe4>)
 80008b4:	f001 f8d5 	bl	8001a62 <HAL_TIM_PWM_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80008be:	f000 f86b 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	4619      	mov	r1, r3
 80008d0:	4810      	ldr	r0, [pc, #64]	; (8000914 <MX_TIM2_Init+0xe4>)
 80008d2:	f001 fdf0 	bl	80024b6 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80008dc:	f000 f85c 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e0:	2360      	movs	r3, #96	; 0x60
 80008e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <MX_TIM2_Init+0xe4>)
 80008f8:	f001 f906 	bl	8001b08 <HAL_TIM_PWM_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000902:	f000 f849 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <MX_TIM2_Init+0xe4>)
 8000908:	f000 f8b8 	bl	8000a7c <HAL_TIM_MspPostInit>

}
 800090c:	bf00      	nop
 800090e:	3738      	adds	r7, #56	; 0x38
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000068 	.word	0x20000068

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_GPIO_Init+0x78>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_GPIO_Init+0x78>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_GPIO_Init+0x78>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_GPIO_Init+0x78>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a11      	ldr	r2, [pc, #68]	; (8000990 <MX_GPIO_Init+0x78>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_GPIO_Init+0x78>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_GPIO_Init+0x7c>)
 8000964:	f000 fc2e 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : in1_pin1_Pin in2_pin1_Pin in1_pin2_Pin in2_pin2_Pin */
  GPIO_InitStruct.Pin = in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin;
 8000968:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800096c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2302      	movs	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0x7c>)
 8000982:	f000 fa97 	bl	8000eb4 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	40010c00 	.word	0x40010c00

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_MspInit+0x5c>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_MspInit+0x5c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_MspInit+0x5c>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_MspInit+0x5c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_MspInit+0x5c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	61d3      	str	r3, [r2, #28]
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_MspInit+0x5c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_MspInit+0x60>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_MspInit+0x60>)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010000 	.word	0x40010000

08000a08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <HAL_TIM_PWM_MspInit+0x34>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10b      	bne.n	8000a32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_TIM_PWM_MspInit+0x38>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a54:	d10b      	bne.n	8000a6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_TIM_Base_MspInit+0x34>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_TIM_Base_MspInit+0x34>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_TIM_Base_MspInit+0x34>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_TIM_MspPostInit+0x98>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d119      	bne.n	8000ad0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ab4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <HAL_TIM_MspPostInit+0xa0>)
 8000aca:	f000 f9f3 	bl	8000eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ace:	e01c      	b.n	8000b0a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad8:	d117      	bne.n	8000b0a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_TIM_MspPostInit+0x9c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af2:	2301      	movs	r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_TIM_MspPostInit+0xa0>)
 8000b06:	f000 f9d5 	bl	8000eb4 <HAL_GPIO_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40012c00 	.word	0x40012c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <HardFault_Handler+0x4>

08000b32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <MemManage_Handler+0x4>

08000b38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <BusFault_Handler+0x4>

08000b3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8a2 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <SystemInit+0x5c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <SystemInit+0x5c>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <SystemInit+0x5c>)
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	4911      	ldr	r1, [pc, #68]	; (8000bd0 <SystemInit+0x5c>)
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <SystemInit+0x60>)
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <SystemInit+0x5c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <SystemInit+0x5c>)
 8000b96:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <SystemInit+0x5c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SystemInit+0x5c>)
 8000ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000baa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SystemInit+0x5c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <SystemInit+0x5c>)
 8000bb2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bb6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SystemInit+0x5c>)
 8000bba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000bbe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SystemInit+0x64>)
 8000bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	f8ff0000 	.word	0xf8ff0000
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bdc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bde:	e003      	b.n	8000be8 <LoopCopyDataInit>

08000be0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000be2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000be4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000be6:	3104      	adds	r1, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bf0:	d3f6      	bcc.n	8000be0 <CopyDataInit>
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bf4:	e002      	b.n	8000bfc <LoopFillZerobss>

08000bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bf8:	f842 3b04 	str.w	r3, [r2], #4

08000bfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c00:	d3f9      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c02:	f7ff ffb7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f001 fc9b 	bl	8002540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0a:	f7ff fc81 	bl	8000510 <main>
  bx lr
 8000c0e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c10:	080025e0 	.word	0x080025e0
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c20:	200000ac 	.word	0x200000ac

08000c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_2_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x28>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x28>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f907 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff feae 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f911 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f8e7 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_IncTick+0x1c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200000a8 	.word	0x200000a8

08000cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <HAL_GetTick+0x10>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	200000a8 	.word	0x200000a8

08000cec <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da0b      	bge.n	8000d7c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <NVIC_SetPriority+0x4c>)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	3b04      	subs	r3, #4
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7a:	e009      	b.n	8000d90 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <NVIC_SetPriority+0x50>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff49 	bl	8000cec <NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff5e 	bl	8000d34 <NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff90 	bl	8000da4 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5f 	bl	8000d50 <NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb0 	bl	8000e08 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed6:	e169      	b.n	80011ac <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8158 	bne.w	80011a6 <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a9a      	ldr	r2, [pc, #616]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d05e      	beq.n	8000fbe <HAL_GPIO_Init+0x10a>
 8000f00:	4a98      	ldr	r2, [pc, #608]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d875      	bhi.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000f06:	4a98      	ldr	r2, [pc, #608]	; (8001168 <HAL_GPIO_Init+0x2b4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d058      	beq.n	8000fbe <HAL_GPIO_Init+0x10a>
 8000f0c:	4a96      	ldr	r2, [pc, #600]	; (8001168 <HAL_GPIO_Init+0x2b4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d86f      	bhi.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000f12:	4a96      	ldr	r2, [pc, #600]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d052      	beq.n	8000fbe <HAL_GPIO_Init+0x10a>
 8000f18:	4a94      	ldr	r2, [pc, #592]	; (800116c <HAL_GPIO_Init+0x2b8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d869      	bhi.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000f1e:	4a94      	ldr	r2, [pc, #592]	; (8001170 <HAL_GPIO_Init+0x2bc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d04c      	beq.n	8000fbe <HAL_GPIO_Init+0x10a>
 8000f24:	4a92      	ldr	r2, [pc, #584]	; (8001170 <HAL_GPIO_Init+0x2bc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d863      	bhi.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000f2a:	4a92      	ldr	r2, [pc, #584]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d046      	beq.n	8000fbe <HAL_GPIO_Init+0x10a>
 8000f30:	4a90      	ldr	r2, [pc, #576]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d85d      	bhi.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d82a      	bhi.n	8000f90 <HAL_GPIO_Init+0xdc>
 8000f3a:	2b12      	cmp	r3, #18
 8000f3c:	d859      	bhi.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <HAL_GPIO_Init+0x90>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000fab 	.word	0x08000fab
 8000f50:	08000fed 	.word	0x08000fed
 8000f54:	08000ff3 	.word	0x08000ff3
 8000f58:	08000ff3 	.word	0x08000ff3
 8000f5c:	08000ff3 	.word	0x08000ff3
 8000f60:	08000ff3 	.word	0x08000ff3
 8000f64:	08000ff3 	.word	0x08000ff3
 8000f68:	08000ff3 	.word	0x08000ff3
 8000f6c:	08000ff3 	.word	0x08000ff3
 8000f70:	08000ff3 	.word	0x08000ff3
 8000f74:	08000ff3 	.word	0x08000ff3
 8000f78:	08000ff3 	.word	0x08000ff3
 8000f7c:	08000ff3 	.word	0x08000ff3
 8000f80:	08000ff3 	.word	0x08000ff3
 8000f84:	08000ff3 	.word	0x08000ff3
 8000f88:	08000fa1 	.word	0x08000fa1
 8000f8c:	08000fb5 	.word	0x08000fb5
 8000f90:	4a79      	ldr	r2, [pc, #484]	; (8001178 <HAL_GPIO_Init+0x2c4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f96:	e02c      	b.n	8000ff2 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	623b      	str	r3, [r7, #32]
          break;
 8000f9e:	e029      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	623b      	str	r3, [r7, #32]
          break;
 8000fa8:	e024      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	3308      	adds	r3, #8
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e01f      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	330c      	adds	r3, #12
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e01a      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e013      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d105      	bne.n	8000fe0 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	611a      	str	r2, [r3, #16]
          break;
 8000fde:	e009      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	615a      	str	r2, [r3, #20]
          break;
 8000fea:	e003      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
          break;
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x140>
          break;
 8000ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2bff      	cmp	r3, #255	; 0xff
 8000ff8:	d801      	bhi.n	8000ffe <HAL_GPIO_Init+0x14a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	e001      	b.n	8001002 <HAL_GPIO_Init+0x14e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d802      	bhi.n	8001010 <HAL_GPIO_Init+0x15c>
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x162>
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	3b08      	subs	r3, #8
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	210f      	movs	r1, #15
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	6a39      	ldr	r1, [r7, #32]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	431a      	orrs	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 80b1 	beq.w	80011a6 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <HAL_GPIO_Init+0x2c8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a4c      	ldr	r2, [pc, #304]	; (800117c <HAL_GPIO_Init+0x2c8>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <HAL_GPIO_Init+0x2c8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800105c:	4a48      	ldr	r2, [pc, #288]	; (8001180 <HAL_GPIO_Init+0x2cc>)
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a40      	ldr	r2, [pc, #256]	; (8001184 <HAL_GPIO_Init+0x2d0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d013      	beq.n	80010b0 <HAL_GPIO_Init+0x1fc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a3f      	ldr	r2, [pc, #252]	; (8001188 <HAL_GPIO_Init+0x2d4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d00d      	beq.n	80010ac <HAL_GPIO_Init+0x1f8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a3e      	ldr	r2, [pc, #248]	; (800118c <HAL_GPIO_Init+0x2d8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0x1f4>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3d      	ldr	r2, [pc, #244]	; (8001190 <HAL_GPIO_Init+0x2dc>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d101      	bne.n	80010a4 <HAL_GPIO_Init+0x1f0>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e006      	b.n	80010b2 <HAL_GPIO_Init+0x1fe>
 80010a4:	2304      	movs	r3, #4
 80010a6:	e004      	b.n	80010b2 <HAL_GPIO_Init+0x1fe>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x1fe>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_GPIO_Init+0x1fe>
 80010b0:	2300      	movs	r3, #0
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4093      	lsls	r3, r2
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	4313      	orrs	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80010c2:	492f      	ldr	r1, [pc, #188]	; (8001180 <HAL_GPIO_Init+0x2cc>)
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	492c      	ldr	r1, [pc, #176]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4928      	ldr	r1, [pc, #160]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	4922      	ldr	r1, [pc, #136]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	491e      	ldr	r1, [pc, #120]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 800111c:	4013      	ands	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	4918      	ldr	r1, [pc, #96]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	43db      	mvns	r3, r3
 8001142:	4914      	ldr	r1, [pc, #80]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 8001144:	4013      	ands	r3, r2
 8001146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d021      	beq.n	8001198 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	490e      	ldr	r1, [pc, #56]	; (8001194 <HAL_GPIO_Init+0x2e0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	60cb      	str	r3, [r1, #12]
 8001160:	e021      	b.n	80011a6 <HAL_GPIO_Init+0x2f2>
 8001162:	bf00      	nop
 8001164:	10320000 	.word	0x10320000
 8001168:	10310000 	.word	0x10310000
 800116c:	10220000 	.word	0x10220000
 8001170:	10210000 	.word	0x10210000
 8001174:	10120000 	.word	0x10120000
 8001178:	10110000 	.word	0x10110000
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	40010800 	.word	0x40010800
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40011000 	.word	0x40011000
 8001190:	40011400 	.word	0x40011400
 8001194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	43db      	mvns	r3, r3
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <HAL_GPIO_Init+0x30c>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	3301      	adds	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	f67f ae92 	bls.w	8000ed8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	372c      	adds	r7, #44	; 0x2c
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	611a      	str	r2, [r3, #16]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8087 	beq.w	800131c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800120e:	4b92      	ldr	r3, [pc, #584]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800121a:	4b8f      	ldr	r3, [pc, #572]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b08      	cmp	r3, #8
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x58>
 8001226:	4b8c      	ldr	r3, [pc, #560]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b88      	ldr	r3, [pc, #544]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d06c      	beq.n	800131a <HAL_RCC_OscConfig+0x126>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d168      	bne.n	800131a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e22d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x70>
 8001256:	4b80      	ldr	r3, [pc, #512]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a7f      	ldr	r2, [pc, #508]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e02e      	b.n	80012c2 <HAL_RCC_OscConfig+0xce>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x92>
 800126c:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a79      	ldr	r2, [pc, #484]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b77      	ldr	r3, [pc, #476]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a76      	ldr	r2, [pc, #472]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e01d      	b.n	80012c2 <HAL_RCC_OscConfig+0xce>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128e:	d10c      	bne.n	80012aa <HAL_RCC_OscConfig+0xb6>
 8001290:	4b71      	ldr	r3, [pc, #452]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a70      	ldr	r2, [pc, #448]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b6e      	ldr	r3, [pc, #440]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a6d      	ldr	r2, [pc, #436]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80012a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e00b      	b.n	80012c2 <HAL_RCC_OscConfig+0xce>
 80012aa:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6a      	ldr	r2, [pc, #424]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80012b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a67      	ldr	r2, [pc, #412]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80012bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d013      	beq.n	80012f2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fd05 	bl	8000cd8 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d2:	f7ff fd01 	bl	8000cd8 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b64      	cmp	r3, #100	; 0x64
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e1e1      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e4:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0xde>
 80012f0:	e014      	b.n	800131c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fcf1 	bl	8000cd8 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fa:	f7ff fced 	bl	8000cd8 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b64      	cmp	r3, #100	; 0x64
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e1cd      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130c:	4b52      	ldr	r3, [pc, #328]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f0      	bne.n	80012fa <HAL_RCC_OscConfig+0x106>
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d063      	beq.n	80013f0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001334:	4b48      	ldr	r3, [pc, #288]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d11c      	bne.n	800137a <HAL_RCC_OscConfig+0x186>
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d116      	bne.n	800137a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x170>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d001      	beq.n	8001364 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e1a1      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4939      	ldr	r1, [pc, #228]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001378:	e03a      	b.n	80013f0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d020      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_OscConfig+0x268>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fca6 	bl	8000cd8 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fca2 	bl	8000cd8 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e182      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4926      	ldr	r1, [pc, #152]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
 80013c2:	e015      	b.n	80013f0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_RCC_OscConfig+0x268>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc85 	bl	8000cd8 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc81 	bl	8000cd8 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e161      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d039      	beq.n	8001470 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d019      	beq.n	8001438 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_RCC_OscConfig+0x26c>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fc65 	bl	8000cd8 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fc61 	bl	8000cd8 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e141      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_RCC_OscConfig+0x264>)
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f000 facb 	bl	80019cc <RCC_Delay>
 8001436:	e01b      	b.n	8001470 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_OscConfig+0x26c>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc4b 	bl	8000cd8 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	e00e      	b.n	8001464 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fc47 	bl	8000cd8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d907      	bls.n	8001464 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e127      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
 8001458:	40021000 	.word	0x40021000
 800145c:	42420000 	.word	0x42420000
 8001460:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ea      	bne.n	8001446 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a6 	beq.w	80015ca <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b82      	ldr	r3, [pc, #520]	; (80016b4 <HAL_RCC_OscConfig+0x4c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b6:	4b7f      	ldr	r3, [pc, #508]	; (80016b4 <HAL_RCC_OscConfig+0x4c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7e      	ldr	r2, [pc, #504]	; (80016b4 <HAL_RCC_OscConfig+0x4c0>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fc09 	bl	8000cd8 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7ff fc05 	bl	8000cd8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	; 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0e5      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014dc:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x4c0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x30a>
 80014f0:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a6e      	ldr	r2, [pc, #440]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e02d      	b.n	800155a <HAL_RCC_OscConfig+0x366>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x32c>
 8001506:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x366>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x34e>
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a60      	ldr	r2, [pc, #384]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a5d      	ldr	r2, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0x366>
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a5a      	ldr	r2, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbb9 	bl	8000cd8 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fbb5 	bl	8000cd8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e093      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ee      	beq.n	800156a <HAL_RCC_OscConfig+0x376>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fba3 	bl	8000cd8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb9f 	bl	8000cd8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e07d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d069      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d061      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d146      	bne.n	8001674 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb74 	bl	8000cd8 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb70 	bl	8000cd8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e050      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161a:	d108      	bne.n	800162e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4921      	ldr	r1, [pc, #132]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a19      	ldr	r1, [r3, #32]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	430b      	orrs	r3, r1
 8001640:	491b      	ldr	r1, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fb44 	bl	8000cd8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fb40 	bl	8000cd8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e020      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x460>
 8001672:	e018      	b.n	80016a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fb2d 	bl	8000cd8 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff fb29 	bl	8000cd8 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e009      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_OscConfig+0x4bc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x48e>
 80016a0:	e001      	b.n	80016a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42420060 	.word	0x42420060

080016bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016ca:	4b7e      	ldr	r3, [pc, #504]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d910      	bls.n	80016fa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d8:	4b7a      	ldr	r3, [pc, #488]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 0207 	bic.w	r2, r3, #7
 80016e0:	4978      	ldr	r1, [pc, #480]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0e0      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d020      	beq.n	8001748 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a6c      	ldr	r2, [pc, #432]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001718:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800171c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172a:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a66      	ldr	r2, [pc, #408]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001730:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001734:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001736:	4b64      	ldr	r3, [pc, #400]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	4961      	ldr	r1, [pc, #388]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d06a      	beq.n	800182a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d115      	bne.n	8001794 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0a7      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d107      	bne.n	8001784 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001774:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e09b      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e093      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001794:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 0203 	bic.w	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4949      	ldr	r1, [pc, #292]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a6:	f7ff fa97 	bl	8000cd8 <HAL_GetTick>
 80017aa:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d112      	bne.n	80017da <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff fa8f 	bl	8000cd8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e077      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d1ee      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xfa>
 80017d8:	e027      	b.n	800182a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d11d      	bne.n	800181e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff fa78 	bl	8000cd8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e060      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d1ee      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x128>
 8001806:	e010      	b.n	800182a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fa66 	bl	8000cd8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04e      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ee      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d210      	bcs.n	800185a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 0207 	bic.w	r2, r3, #7
 8001840:	4920      	ldr	r1, [pc, #128]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCC_ClockConfig+0x208>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e030      	b.n	80018bc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	4915      	ldr	r1, [pc, #84]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001898:	f000 f81c 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x20c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	4908      	ldr	r1, [pc, #32]	; (80018cc <HAL_RCC_ClockConfig+0x210>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_RCC_ClockConfig+0x214>)
 80018b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff f9cd 	bl	8000c54 <HAL_InitTick>
  
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	080025c0 	.word	0x080025c0
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b490      	push	{r4, r7}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_GetSysClockFreq+0xac>)
 80018dc:	1d3c      	adds	r4, r7, #4
 80018de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018e4:	f240 2301 	movw	r3, #513	; 0x201
 80018e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d002      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x40>
 800190e:	2b08      	cmp	r3, #8
 8001910:	d003      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x46>
 8001912:	e02b      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001914:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001916:	623b      	str	r3, [r7, #32]
      break;
 8001918:	e02b      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3328      	adds	r3, #40	; 0x28
 8001924:	443b      	add	r3, r7
 8001926:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800192a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d012      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0c5b      	lsrs	r3, r3, #17
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	3328      	adds	r3, #40	; 0x28
 8001942:	443b      	add	r3, r7
 8001944:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001948:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_RCC_GetSysClockFreq+0xb4>)
 800194e:	fb03 f202 	mul.w	r2, r3, r2
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	e004      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	623b      	str	r3, [r7, #32]
      break;
 800196a:	e002      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_GetSysClockFreq+0xb4>)
 800196e:	623b      	str	r3, [r7, #32]
      break;
 8001970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001972:	6a3b      	ldr	r3, [r7, #32]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bc90      	pop	{r4, r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	080025b0 	.word	0x080025b0
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	003d0900 	.word	0x003d0900

08001990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000000 	.word	0x20000000

080019a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a8:	f7ff fff2 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0adb      	lsrs	r3, r3, #11
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4903      	ldr	r1, [pc, #12]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	080025d0 	.word	0x080025d0

080019cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <RCC_Delay+0x38>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <RCC_Delay+0x3c>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0a5b      	lsrs	r3, r3, #9
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80019e8:	bf00      	nop
}
 80019ea:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	60fa      	str	r2, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f8      	bne.n	80019e8 <RCC_Delay+0x1c>
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000
 8001a08:	10624dd3 	.word	0x10624dd3

08001a0c <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e01d      	b.n	8001a5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff f806 	bl	8000a44 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f000 fa0e 	bl	8001e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e01d      	b.n	8001ab0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7fe ffbd 	bl	8000a08 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2202      	movs	r2, #2
 8001a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f000 f9e3 	bl	8001e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fc79 	bl	80023c2 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <HAL_TIM_PWM_Start+0x4c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d107      	bne.n	8001aea <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40012c00 	.word	0x40012c00

08001b08 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e0b4      	b.n	8001c8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	f200 809f 	bhi.w	8001c78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b75 	.word	0x08001b75
 8001b44:	08001c79 	.word	0x08001c79
 8001b48:	08001c79 	.word	0x08001c79
 8001b4c:	08001c79 	.word	0x08001c79
 8001b50:	08001bb5 	.word	0x08001bb5
 8001b54:	08001c79 	.word	0x08001c79
 8001b58:	08001c79 	.word	0x08001c79
 8001b5c:	08001c79 	.word	0x08001c79
 8001b60:	08001bf7 	.word	0x08001bf7
 8001b64:	08001c79 	.word	0x08001c79
 8001b68:	08001c79 	.word	0x08001c79
 8001b6c:	08001c79 	.word	0x08001c79
 8001b70:	08001c37 	.word	0x08001c37
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f9dc 	bl	8001f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0208 	orr.w	r2, r2, #8
 8001b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0204 	bic.w	r2, r2, #4
 8001b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6999      	ldr	r1, [r3, #24]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	619a      	str	r2, [r3, #24]
    }
    break;
 8001bb2:	e062      	b.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fa28 	bl	8002010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6999      	ldr	r1, [r3, #24]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	021a      	lsls	r2, r3, #8
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	619a      	str	r2, [r3, #24]
    }
    break;
 8001bf4:	e041      	b.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fa77 	bl	80020f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0208 	orr.w	r2, r2, #8
 8001c10:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0204 	bic.w	r2, r2, #4
 8001c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	69d9      	ldr	r1, [r3, #28]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	61da      	str	r2, [r3, #28]
    }
    break;
 8001c34:	e021      	b.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fac7 	bl	80021d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69da      	ldr	r2, [r3, #28]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c50:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69d9      	ldr	r1, [r3, #28]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	021a      	lsls	r2, r3, #8
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	61da      	str	r2, [r3, #28]
    }
    break;
 8001c76:	e000      	b.n	8001c7a <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001c78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e0d8      	b.n	8001e62 <HAL_TIM_ConfigClockSource+0x1ce>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce8:	d052      	beq.n	8001d90 <HAL_TIM_ConfigClockSource+0xfc>
 8001cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cee:	f200 80ae 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf6:	d027      	beq.n	8001d48 <HAL_TIM_ConfigClockSource+0xb4>
 8001cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfc:	f200 80a7 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001d00:	2b70      	cmp	r3, #112	; 0x70
 8001d02:	d02a      	beq.n	8001d5a <HAL_TIM_ConfigClockSource+0xc6>
 8001d04:	2b70      	cmp	r3, #112	; 0x70
 8001d06:	f200 80a2 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001d0a:	2b60      	cmp	r3, #96	; 0x60
 8001d0c:	d063      	beq.n	8001dd6 <HAL_TIM_ConfigClockSource+0x142>
 8001d0e:	2b60      	cmp	r3, #96	; 0x60
 8001d10:	f200 809d 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001d14:	2b50      	cmp	r3, #80	; 0x50
 8001d16:	d04e      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x122>
 8001d18:	2b50      	cmp	r3, #80	; 0x50
 8001d1a:	f200 8098 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001d1e:	2b40      	cmp	r3, #64	; 0x40
 8001d20:	d069      	beq.n	8001df6 <HAL_TIM_ConfigClockSource+0x162>
 8001d22:	2b40      	cmp	r3, #64	; 0x40
 8001d24:	f200 8093 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001d28:	2b30      	cmp	r3, #48	; 0x30
 8001d2a:	f000 8089 	beq.w	8001e40 <HAL_TIM_ConfigClockSource+0x1ac>
 8001d2e:	2b30      	cmp	r3, #48	; 0x30
 8001d30:	f200 808d 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d07c      	beq.n	8001e32 <HAL_TIM_ConfigClockSource+0x19e>
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	f200 8088 	bhi.w	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d069      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0x182>
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d06e      	beq.n	8001e24 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001d46:	e082      	b.n	8001e4e <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0207 	bic.w	r2, r2, #7
 8001d56:	609a      	str	r2, [r3, #8]
    break;
 8001d58:	e07a      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6899      	ldr	r1, [r3, #8]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f000 fb09 	bl	8002380 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	609a      	str	r2, [r3, #8]
    break;
 8001d8e:	e05f      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6899      	ldr	r1, [r3, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f000 faee 	bl	8002380 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db2:	609a      	str	r2, [r3, #8]
    break;
 8001db4:	e04c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f000 fa58 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2150      	movs	r1, #80	; 0x50
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fab7 	bl	8002342 <TIM_ITRx_SetConfig>
    break;
 8001dd4:	e03c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f000 fa7a 	bl	80022dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2160      	movs	r1, #96	; 0x60
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 faa7 	bl	8002342 <TIM_ITRx_SetConfig>
    break;
 8001df4:	e02c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6859      	ldr	r1, [r3, #4]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f000 fa38 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa97 	bl	8002342 <TIM_ITRx_SetConfig>
    break;
 8001e14:	e01c      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fa90 	bl	8002342 <TIM_ITRx_SetConfig>
    break;
 8001e22:	e015      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2110      	movs	r1, #16
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fa89 	bl	8002342 <TIM_ITRx_SetConfig>
    break;
 8001e30:	e00e      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2120      	movs	r1, #32
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fa82 	bl	8002342 <TIM_ITRx_SetConfig>
    break;
 8001e3e:	e007      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2130      	movs	r1, #48	; 0x30
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fa7b 	bl	8002342 <TIM_ITRx_SetConfig>
    break;
 8001e4c:	e000      	b.n	8001e50 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8001e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <TIM_Base_SetConfig+0xc0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00b      	beq.n	8001ea0 <TIM_Base_SetConfig+0x34>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d007      	beq.n	8001ea0 <TIM_Base_SetConfig+0x34>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <TIM_Base_SetConfig+0xc4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <TIM_Base_SetConfig+0x34>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <TIM_Base_SetConfig+0xc8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <TIM_Base_SetConfig+0xc0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00b      	beq.n	8001ed2 <TIM_Base_SetConfig+0x66>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec0:	d007      	beq.n	8001ed2 <TIM_Base_SetConfig+0x66>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1a      	ldr	r2, [pc, #104]	; (8001f30 <TIM_Base_SetConfig+0xc4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d003      	beq.n	8001ed2 <TIM_Base_SetConfig+0x66>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <TIM_Base_SetConfig+0xc8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d108      	bne.n	8001ee4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eea:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <TIM_Base_SetConfig+0xc0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d103      	bne.n	8001f1c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	615a      	str	r2, [r3, #20]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800

08001f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	f023 0201 	bic.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f023 0302 	bic.w	r3, r3, #2
 8001f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	; (800200c <TIM_OC1_SetConfig+0xd4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10c      	bne.n	8001fba <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0308 	bic.w	r3, r3, #8
 8001fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <TIM_OC1_SetConfig+0xd4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d111      	bne.n	8001fe6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	621a      	str	r2, [r3, #32]
}
 8002000:	bf00      	nop
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00

08002010 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	f023 0210 	bic.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f023 0320 	bic.w	r3, r3, #32
 8002066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <TIM_OC2_SetConfig+0xdc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d10d      	bne.n	8002098 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002096:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a14      	ldr	r2, [pc, #80]	; (80020ec <TIM_OC2_SetConfig+0xdc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d113      	bne.n	80020c8 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	621a      	str	r2, [r3, #32]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40012c00 	.word	0x40012c00

080020f0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <TIM_OC3_SetConfig+0xdc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10d      	bne.n	8002176 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002174:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <TIM_OC3_SetConfig+0xdc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d113      	bne.n	80021a6 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800218c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	621a      	str	r2, [r3, #32]
}
 80021c0:	bf00      	nop
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00

080021d0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002212:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002226:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	031b      	lsls	r3, r3, #12
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <TIM_OC4_SetConfig+0xa4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d109      	bne.n	8002250 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002242:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	621a      	str	r2, [r3, #32]
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40012c00 	.word	0x40012c00

08002278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0201 	bic.w	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f023 030a 	bic.w	r3, r3, #10
 80022bc:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	621a      	str	r2, [r3, #32]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 0210 	bic.w	r2, r3, #16
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800230e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	031b      	lsls	r3, r3, #12
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	621a      	str	r2, [r3, #32]
}
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	f043 0307 	orr.w	r3, r3, #7
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	609a      	str	r2, [r3, #8]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800239e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	021a      	lsls	r2, r3, #8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	609a      	str	r2, [r3, #8]
}
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b087      	sub	sp, #28
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80023d2:	2201      	movs	r2, #1
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a1a      	ldr	r2, [r3, #32]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	401a      	ands	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	621a      	str	r2, [r3, #32]
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800241e:	2302      	movs	r3, #2
 8002420:	e044      	b.n	80024ac <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e032      	b.n	8002534 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024ec:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
	...

08002540 <__libc_init_array>:
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	2600      	movs	r6, #0
 8002544:	4d0c      	ldr	r5, [pc, #48]	; (8002578 <__libc_init_array+0x38>)
 8002546:	4c0d      	ldr	r4, [pc, #52]	; (800257c <__libc_init_array+0x3c>)
 8002548:	1b64      	subs	r4, r4, r5
 800254a:	10a4      	asrs	r4, r4, #2
 800254c:	42a6      	cmp	r6, r4
 800254e:	d109      	bne.n	8002564 <__libc_init_array+0x24>
 8002550:	f000 f822 	bl	8002598 <_init>
 8002554:	2600      	movs	r6, #0
 8002556:	4d0a      	ldr	r5, [pc, #40]	; (8002580 <__libc_init_array+0x40>)
 8002558:	4c0a      	ldr	r4, [pc, #40]	; (8002584 <__libc_init_array+0x44>)
 800255a:	1b64      	subs	r4, r4, r5
 800255c:	10a4      	asrs	r4, r4, #2
 800255e:	42a6      	cmp	r6, r4
 8002560:	d105      	bne.n	800256e <__libc_init_array+0x2e>
 8002562:	bd70      	pop	{r4, r5, r6, pc}
 8002564:	f855 3b04 	ldr.w	r3, [r5], #4
 8002568:	4798      	blx	r3
 800256a:	3601      	adds	r6, #1
 800256c:	e7ee      	b.n	800254c <__libc_init_array+0xc>
 800256e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002572:	4798      	blx	r3
 8002574:	3601      	adds	r6, #1
 8002576:	e7f2      	b.n	800255e <__libc_init_array+0x1e>
 8002578:	080025d8 	.word	0x080025d8
 800257c:	080025d8 	.word	0x080025d8
 8002580:	080025d8 	.word	0x080025d8
 8002584:	080025dc 	.word	0x080025dc

08002588 <memset>:
 8002588:	4603      	mov	r3, r0
 800258a:	4402      	add	r2, r0
 800258c:	4293      	cmp	r3, r2
 800258e:	d100      	bne.n	8002592 <memset+0xa>
 8002590:	4770      	bx	lr
 8002592:	f803 1b01 	strb.w	r1, [r3], #1
 8002596:	e7f9      	b.n	800258c <memset+0x4>

08002598 <_init>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr

080025a4 <_fini>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr
