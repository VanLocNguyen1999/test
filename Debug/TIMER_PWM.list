
TIMER_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002674  08002674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002674  08002674  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002674  08002674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800267c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002688  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007219  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146c  00000000  00000000  0002724e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  000286c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  00028f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014cb8  00000000  00000000  00029788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d4f  00000000  00000000  0003e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f6c9  00000000  00000000  0004718f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002440  00000000  00000000  000b68a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002634 	.word	0x08002634

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002634 	.word	0x08002634

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fbb1 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8e5 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa25 	bl	800096c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000522:	f000 f9af 	bl	8000884 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000526:	f000 f91b 	bl	8000760 <MX_TIM1_Init>
  HBridge L293D_chanel1;
  HBridge L293D_chanel2;
  PWMController pwm1;
  PWMController pwm2;

  HBridge_Init(&L293D_chanel1, in1_pin1_Pin, in2_pin1_Pin, &pwm1);
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	f107 0018 	add.w	r0, r7, #24
 8000532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	f000 f845 	bl	80005c8 <HBridge_Init>
  HBridge_Init(&L293D_chanel2, in1_pin2_Pin, in2_pin2_Pin, &pwm2);
 800053e:	463b      	mov	r3, r7
 8000540:	f107 0010 	add.w	r0, r7, #16
 8000544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	f000 f83c 	bl	80005c8 <HBridge_Init>

  HAL_GPIO_WritePin(GPIOB,L293D_chanel1.in1_pin, 1);
 8000550:	8b3b      	ldrh	r3, [r7, #24]
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	4819      	ldr	r0, [pc, #100]	; (80005bc <main+0xac>)
 8000558:	f000 fe82 	bl	8001260 <HAL_GPIO_WritePin>
  PWMController_Init(&pwm1, &htim1, TIM_CHANNEL_1, 1000, 0.4);
 800055c:	f107 0008 	add.w	r0, r7, #8
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <main+0xb0>)
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	2200      	movs	r2, #0
 800056a:	4916      	ldr	r1, [pc, #88]	; (80005c4 <main+0xb4>)
 800056c:	f000 f874 	bl	8000658 <PWMController_Init>
  PWMController_Init(&pwm2, &htim1, TIM_CHANNEL_2, 1000, 0.4);
 8000570:	4638      	mov	r0, r7
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <main+0xb0>)
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	2204      	movs	r2, #4
 800057c:	4911      	ldr	r1, [pc, #68]	; (80005c4 <main+0xb4>)
 800057e:	f000 f86b 	bl	8000658 <PWMController_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HBridge_Forward(&L293D_chanel1);
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f836 	bl	80005f8 <HBridge_Forward>
	  HBridge_Forward(&L293D_chanel2);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f831 	bl	80005f8 <HBridge_Forward>
	  HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f000 fbd1 	bl	8000d40 <HAL_Delay>

	  HBridge_Backward(&L293D_chanel1);
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f840 	bl	8000628 <HBridge_Backward>
	  HBridge_Backward(&L293D_chanel2);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f83b 	bl	8000628 <HBridge_Backward>
	  HAL_Delay(1000);
 80005b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b6:	f000 fbc3 	bl	8000d40 <HAL_Delay>
	  HBridge_Forward(&L293D_chanel1);
 80005ba:	e7e2      	b.n	8000582 <main+0x72>
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	3ecccccd 	.word	0x3ecccccd
 80005c4:	20000028 	.word	0x20000028

080005c8 <HBridge_Init>:
  /* USER CODE END 3 */
}

/* USER CODE END WHILE */

void HBridge_Init(HBridge *hbridge, uint16_t in1_pin, uint16_t in2_pin, PWMController *pwm) {
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	817b      	strh	r3, [r7, #10]
 80005d6:	4613      	mov	r3, r2
 80005d8:	813b      	strh	r3, [r7, #8]

    hbridge->in1_pin = in1_pin;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	897a      	ldrh	r2, [r7, #10]
 80005de:	801a      	strh	r2, [r3, #0]
    hbridge->in2_pin = in2_pin;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	893a      	ldrh	r2, [r7, #8]
 80005e4:	805a      	strh	r2, [r3, #2]
    hbridge->pwm = pwm;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	605a      	str	r2, [r3, #4]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
	...

080005f8 <HBridge_Forward>:
void HBridge_Forward(HBridge *hbridge) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB,hbridge->in1_pin, 1);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2201      	movs	r2, #1
 8000606:	4619      	mov	r1, r3
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <HBridge_Forward+0x2c>)
 800060a:	f000 fe29 	bl	8001260 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,hbridge->in2_pin, 0);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	885b      	ldrh	r3, [r3, #2]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <HBridge_Forward+0x2c>)
 8000618:	f000 fe22 	bl	8001260 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40010c00 	.word	0x40010c00

08000628 <HBridge_Backward>:

void HBridge_Backward(HBridge *hbridge) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(GPIOB,hbridge->in1_pin, 0);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <HBridge_Backward+0x2c>)
 800063a:	f000 fe11 	bl	8001260 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,hbridge->in2_pin, 1);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	885b      	ldrh	r3, [r3, #2]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	4803      	ldr	r0, [pc, #12]	; (8000654 <HBridge_Backward+0x2c>)
 8000648:	f000 fe0a 	bl	8001260 <HAL_GPIO_WritePin>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40010c00 	.word	0x40010c00

08000658 <PWMController_Init>:


void PWMController_Init(PWMController *pwm, TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency, float dutyCycle) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]

	pwm->htim = htim;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	601a      	str	r2, [r3, #0]
	pwm->htim->Instance->ARR = (HAL_RCC_GetPCLK2Freq() / frequency  );
 800066c:	f001 f9e8 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8000670:	4601      	mov	r1, r0
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	fbb1 f2f2 	udiv	r2, r1, r2
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
    uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // Lấy tần số clock của Timer
 8000680:	f001 f9de 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 8000684:	61f8      	str	r0, [r7, #28]
    uint32_t prescaler = timerClock / frequency - 1;
 8000686:	69fa      	ldr	r2, [r7, #28]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	fbb2 f3f3 	udiv	r3, r2, r3
 800068e:	3b01      	subs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
    uint32_t pulse = (pwm->htim->Instance->ARR + 1) * dutyCycle;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	3301      	adds	r3, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff febf 	bl	8000420 <__aeabi_ui2f>
 80006a2:	4603      	mov	r3, r0
 80006a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fd50 	bl	800014c <__aeabi_fmul>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff0e 	bl	80004d0 <__aeabi_f2uiz>
 80006b4:	4603      	mov	r3, r0
 80006b6:	617b      	str	r3, [r7, #20]
    pwm->channel = channel;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	605a      	str	r2, [r3, #4]
    pwm->htim->Init.Prescaler = prescaler;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	69ba      	ldr	r2, [r7, #24]
 80006c4:	605a      	str	r2, [r3, #4]
    pwm->htim->Instance->CCR1 = pulse;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(pwm->htim, pwm->channel);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4619      	mov	r1, r3
 80006da:	4610      	mov	r0, r2
 80006dc:	f001 fa3a 	bl	8001b54 <HAL_TIM_PWM_Start>
}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b090      	sub	sp, #64	; 0x40
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0318 	add.w	r3, r7, #24
 80006f2:	2228      	movs	r2, #40	; 0x28
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 ff94 	bl	8002624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	2310      	movs	r3, #16
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fdb6 	bl	8001290 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800072a:	f000 f95f 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f806 	bl	8001758 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000752:	f000 f94b 	bl	80009ec <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3740      	adds	r7, #64	; 0x40
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b090      	sub	sp, #64	; 0x40
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000766:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <MX_TIM1_Init+0x11c>)
 8000798:	4a39      	ldr	r2, [pc, #228]	; (8000880 <MX_TIM1_Init+0x120>)
 800079a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <MX_TIM1_Init+0x11c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <MX_TIM1_Init+0x11c>)
 80007a4:	2260      	movs	r2, #96	; 0x60
 80007a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <MX_TIM1_Init+0x11c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <MX_TIM1_Init+0x11c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <MX_TIM1_Init+0x11c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_TIM1_Init+0x11c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007c0:	482e      	ldr	r0, [pc, #184]	; (800087c <MX_TIM1_Init+0x11c>)
 80007c2:	f001 f99c 	bl	8001afe <HAL_TIM_PWM_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f90e 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007dc:	4619      	mov	r1, r3
 80007de:	4827      	ldr	r0, [pc, #156]	; (800087c <MX_TIM1_Init+0x11c>)
 80007e0:	f001 feb7 	bl	8002552 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80007ea:	f000 f8ff 	bl	80009ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ee:	2360      	movs	r3, #96	; 0x60
 80007f0:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <MX_TIM1_Init+0x11c>)
 8000814:	f001 f9c6 	bl	8001ba4 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800081e:	f000 f8e5 	bl	80009ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <MX_TIM1_Init+0x11c>)
 800082c:	f001 f9ba 	bl	8001ba4 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000836:	f000 f8d9 	bl	80009ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_TIM1_Init+0x11c>)
 800085e:	f001 fe20 	bl	80024a2 <HAL_TIMEx_ConfigBreakDeadTime>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000868:	f000 f8c0 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <MX_TIM1_Init+0x11c>)
 800086e:	f000 f92f 	bl	8000ad0 <HAL_TIM_MspPostInit>

}
 8000872:	bf00      	nop
 8000874:	3740      	adds	r7, #64	; 0x40
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028
 8000880:	40012c00 	.word	0x40012c00

08000884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008be:	2203      	movs	r2, #3
 80008c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008ca:	22c8      	movs	r2, #200	; 0xc8
 80008cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008da:	4823      	ldr	r0, [pc, #140]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008dc:	f001 f8e4 	bl	8001aa8 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80008e6:	f000 f881 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481c      	ldr	r0, [pc, #112]	; (8000968 <MX_TIM2_Init+0xe4>)
 80008f8:	f001 fa1a 	bl	8001d30 <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000902:	f000 f873 	bl	80009ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000906:	4818      	ldr	r0, [pc, #96]	; (8000968 <MX_TIM2_Init+0xe4>)
 8000908:	f001 f8f9 	bl	8001afe <HAL_TIM_PWM_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000912:	f000 f86b 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	4619      	mov	r1, r3
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <MX_TIM2_Init+0xe4>)
 8000926:	f001 fe14 	bl	8002552 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000930:	f000 f85c 	bl	80009ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000934:	2360      	movs	r3, #96	; 0x60
 8000936:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM2_Init+0xe4>)
 800094c:	f001 f92a 	bl	8001ba4 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000956:	f000 f849 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM2_Init+0xe4>)
 800095c:	f000 f8b8 	bl	8000ad0 <HAL_TIM_MspPostInit>

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	; 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000068 	.word	0x20000068

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_GPIO_Init+0x78>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_GPIO_Init+0x78>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0x78>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_GPIO_Init+0x78>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x78>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_GPIO_Init+0x78>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_GPIO_Init+0x7c>)
 80009b8:	f000 fc52 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : in1_pin1_Pin in2_pin1_Pin in1_pin2_Pin in2_pin2_Pin */
  GPIO_InitStruct.Pin = in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin;
 80009bc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x7c>)
 80009d6:	f000 fabb 	bl	8000f50 <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010c00 	.word	0x40010c00

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_MspInit+0x5c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <HAL_MspInit+0x5c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_MspInit+0x5c>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x5c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x5c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x5c>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_MspInit+0x60>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_MspInit+0x60>)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010000 	.word	0x40010000

08000a5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_TIM_PWM_MspInit+0x34>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10b      	bne.n	8000a86 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_TIM_PWM_MspInit+0x38>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_TIM_PWM_MspInit+0x38>)
 8000a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a78:	6193      	str	r3, [r2, #24]
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_TIM_PWM_MspInit+0x38>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	40012c00 	.word	0x40012c00
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa8:	d10b      	bne.n	8000ac2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_TIM_Base_MspInit+0x34>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_TIM_Base_MspInit+0x34>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_TIM_Base_MspInit+0x34>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <HAL_TIM_MspPostInit+0x98>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d119      	bne.n	8000b24 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <HAL_TIM_MspPostInit+0x9c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_TIM_MspPostInit+0x9c>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_TIM_MspPostInit+0x9c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4814      	ldr	r0, [pc, #80]	; (8000b70 <HAL_TIM_MspPostInit+0xa0>)
 8000b1e:	f000 fa17 	bl	8000f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b22:	e01c      	b.n	8000b5e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2c:	d117      	bne.n	8000b5e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_TIM_MspPostInit+0x9c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_TIM_MspPostInit+0x9c>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_TIM_MspPostInit+0x9c>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b46:	2301      	movs	r3, #1
 8000b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_TIM_MspPostInit+0xa0>)
 8000b5a:	f000 f9f9 	bl	8000f50 <HAL_GPIO_Init>
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40012c00 	.word	0x40012c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <HardFault_Handler+0x4>

08000b86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <BusFault_Handler+0x4>

08000b92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f8a2 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <SystemInit+0x5c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <SystemInit+0x5c>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <SystemInit+0x5c>)
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4911      	ldr	r1, [pc, #68]	; (8000c24 <SystemInit+0x5c>)
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SystemInit+0x60>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <SystemInit+0x5c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <SystemInit+0x5c>)
 8000bea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <SystemInit+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SystemInit+0x5c>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <SystemInit+0x5c>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <SystemInit+0x5c>)
 8000c06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SystemInit+0x5c>)
 8000c0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SystemInit+0x64>)
 8000c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	f8ff0000 	.word	0xf8ff0000
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c32:	e003      	b.n	8000c3c <LoopCopyDataInit>

08000c34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c3a:	3104      	adds	r1, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c3c:	480a      	ldr	r0, [pc, #40]	; (8000c68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c44:	d3f6      	bcc.n	8000c34 <CopyDataInit>
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c48:	e002      	b.n	8000c50 <LoopFillZerobss>

08000c4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c4c:	f842 3b04 	str.w	r3, [r2], #4

08000c50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c54:	d3f9      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c56:	f7ff ffb7 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f001 fcbf 	bl	80025dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c5e:	f7ff fc57 	bl	8000510 <main>
  bx lr
 8000c62:	4770      	bx	lr
  ldr r3, =_sidata
 8000c64:	0800267c 	.word	0x0800267c
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c70:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c74:	200000ac 	.word	0x200000ac

08000c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_2_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x28>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x28>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f92b 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff feae 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f935 	bl	8000f36 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 f90b 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_IncTick+0x20>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	20000008 	.word	0x20000008
 8000d28:	200000a8 	.word	0x200000a8

08000d2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_GetTick+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	200000a8 	.word	0x200000a8

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff fff0 	bl	8000d2c <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d005      	beq.n	8000d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_Delay+0x44>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d66:	bf00      	nop
 8000d68:	f7ff ffe0 	bl	8000d2c <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d8f7      	bhi.n	8000d68 <HAL_Delay+0x28>
  {
  }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da0b      	bge.n	8000e18 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <NVIC_SetPriority+0x4c>)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	3b04      	subs	r3, #4
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e16:	e009      	b.n	8000e2c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <NVIC_SetPriority+0x50>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff90 	bl	8000dec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff49 	bl	8000d88 <NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff5e 	bl	8000dd0 <NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffb0 	bl	8000ea4 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b08b      	sub	sp, #44	; 0x2c
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	e169      	b.n	8001248 <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000f74:	2201      	movs	r2, #1
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8158 	bne.w	8001242 <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a9a      	ldr	r2, [pc, #616]	; (8001200 <HAL_GPIO_Init+0x2b0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d05e      	beq.n	800105a <HAL_GPIO_Init+0x10a>
 8000f9c:	4a98      	ldr	r2, [pc, #608]	; (8001200 <HAL_GPIO_Init+0x2b0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d875      	bhi.n	800108e <HAL_GPIO_Init+0x13e>
 8000fa2:	4a98      	ldr	r2, [pc, #608]	; (8001204 <HAL_GPIO_Init+0x2b4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d058      	beq.n	800105a <HAL_GPIO_Init+0x10a>
 8000fa8:	4a96      	ldr	r2, [pc, #600]	; (8001204 <HAL_GPIO_Init+0x2b4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d86f      	bhi.n	800108e <HAL_GPIO_Init+0x13e>
 8000fae:	4a96      	ldr	r2, [pc, #600]	; (8001208 <HAL_GPIO_Init+0x2b8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d052      	beq.n	800105a <HAL_GPIO_Init+0x10a>
 8000fb4:	4a94      	ldr	r2, [pc, #592]	; (8001208 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d869      	bhi.n	800108e <HAL_GPIO_Init+0x13e>
 8000fba:	4a94      	ldr	r2, [pc, #592]	; (800120c <HAL_GPIO_Init+0x2bc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d04c      	beq.n	800105a <HAL_GPIO_Init+0x10a>
 8000fc0:	4a92      	ldr	r2, [pc, #584]	; (800120c <HAL_GPIO_Init+0x2bc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d863      	bhi.n	800108e <HAL_GPIO_Init+0x13e>
 8000fc6:	4a92      	ldr	r2, [pc, #584]	; (8001210 <HAL_GPIO_Init+0x2c0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d046      	beq.n	800105a <HAL_GPIO_Init+0x10a>
 8000fcc:	4a90      	ldr	r2, [pc, #576]	; (8001210 <HAL_GPIO_Init+0x2c0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d85d      	bhi.n	800108e <HAL_GPIO_Init+0x13e>
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d82a      	bhi.n	800102c <HAL_GPIO_Init+0xdc>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d859      	bhi.n	800108e <HAL_GPIO_Init+0x13e>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <HAL_GPIO_Init+0x90>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	0800105b 	.word	0x0800105b
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08001047 	.word	0x08001047
 8000fec:	08001089 	.word	0x08001089
 8000ff0:	0800108f 	.word	0x0800108f
 8000ff4:	0800108f 	.word	0x0800108f
 8000ff8:	0800108f 	.word	0x0800108f
 8000ffc:	0800108f 	.word	0x0800108f
 8001000:	0800108f 	.word	0x0800108f
 8001004:	0800108f 	.word	0x0800108f
 8001008:	0800108f 	.word	0x0800108f
 800100c:	0800108f 	.word	0x0800108f
 8001010:	0800108f 	.word	0x0800108f
 8001014:	0800108f 	.word	0x0800108f
 8001018:	0800108f 	.word	0x0800108f
 800101c:	0800108f 	.word	0x0800108f
 8001020:	0800108f 	.word	0x0800108f
 8001024:	0800103d 	.word	0x0800103d
 8001028:	08001051 	.word	0x08001051
 800102c:	4a79      	ldr	r2, [pc, #484]	; (8001214 <HAL_GPIO_Init+0x2c4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001032:	e02c      	b.n	800108e <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e029      	b.n	8001090 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	3304      	adds	r3, #4
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e024      	b.n	8001090 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	3308      	adds	r3, #8
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e01f      	b.n	8001090 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	330c      	adds	r3, #12
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e01a      	b.n	8001090 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001062:	2304      	movs	r3, #4
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e013      	b.n	8001090 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	611a      	str	r2, [r3, #16]
          break;
 800107a:	e009      	b.n	8001090 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	615a      	str	r2, [r3, #20]
          break;
 8001086:	e003      	b.n	8001090 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x140>
          break;
 800108e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2bff      	cmp	r3, #255	; 0xff
 8001094:	d801      	bhi.n	800109a <HAL_GPIO_Init+0x14a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	e001      	b.n	800109e <HAL_GPIO_Init+0x14e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3304      	adds	r3, #4
 800109e:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2bff      	cmp	r3, #255	; 0xff
 80010a4:	d802      	bhi.n	80010ac <HAL_GPIO_Init+0x15c>
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x162>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3b08      	subs	r3, #8
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	210f      	movs	r1, #15
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	6a39      	ldr	r1, [r7, #32]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	431a      	orrs	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80b1 	beq.w	8001242 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e0:	4b4d      	ldr	r3, [pc, #308]	; (8001218 <HAL_GPIO_Init+0x2c8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <HAL_GPIO_Init+0x2c8>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b4a      	ldr	r3, [pc, #296]	; (8001218 <HAL_GPIO_Init+0x2c8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80010f8:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x2cc>)
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a40      	ldr	r2, [pc, #256]	; (8001220 <HAL_GPIO_Init+0x2d0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d013      	beq.n	800114c <HAL_GPIO_Init+0x1fc>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a3f      	ldr	r2, [pc, #252]	; (8001224 <HAL_GPIO_Init+0x2d4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d00d      	beq.n	8001148 <HAL_GPIO_Init+0x1f8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <HAL_GPIO_Init+0x2d8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x1f4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3d      	ldr	r2, [pc, #244]	; (800122c <HAL_GPIO_Init+0x2dc>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_GPIO_Init+0x1f0>
 800113c:	2303      	movs	r3, #3
 800113e:	e006      	b.n	800114e <HAL_GPIO_Init+0x1fe>
 8001140:	2304      	movs	r3, #4
 8001142:	e004      	b.n	800114e <HAL_GPIO_Init+0x1fe>
 8001144:	2302      	movs	r3, #2
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0x1fe>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_GPIO_Init+0x1fe>
 800114c:	2300      	movs	r3, #0
 800114e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001150:	f002 0203 	and.w	r2, r2, #3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4093      	lsls	r3, r2
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	4313      	orrs	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800115e:	492f      	ldr	r1, [pc, #188]	; (800121c <HAL_GPIO_Init+0x2cc>)
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	492c      	ldr	r1, [pc, #176]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	4928      	ldr	r1, [pc, #160]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 8001190:	4013      	ands	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4922      	ldr	r1, [pc, #136]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	491e      	ldr	r1, [pc, #120]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4918      	ldr	r1, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	43db      	mvns	r3, r3
 80011de:	4914      	ldr	r1, [pc, #80]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d021      	beq.n	8001234 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	490e      	ldr	r1, [pc, #56]	; (8001230 <HAL_GPIO_Init+0x2e0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60cb      	str	r3, [r1, #12]
 80011fc:	e021      	b.n	8001242 <HAL_GPIO_Init+0x2f2>
 80011fe:	bf00      	nop
 8001200:	10320000 	.word	0x10320000
 8001204:	10310000 	.word	0x10310000
 8001208:	10220000 	.word	0x10220000
 800120c:	10210000 	.word	0x10210000
 8001210:	10120000 	.word	0x10120000
 8001214:	10110000 	.word	0x10110000
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	40010800 	.word	0x40010800
 8001224:	40010c00 	.word	0x40010c00
 8001228:	40011000 	.word	0x40011000
 800122c:	40011400 	.word	0x40011400
 8001230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_GPIO_Init+0x30c>)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	43db      	mvns	r3, r3
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <HAL_GPIO_Init+0x30c>)
 800123e:	4013      	ands	r3, r2
 8001240:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	3301      	adds	r3, #1
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f ae92 	bls.w	8000f74 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	372c      	adds	r7, #44	; 0x2c
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	611a      	str	r2, [r3, #16]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8087 	beq.w	80013b8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012aa:	4b92      	ldr	r3, [pc, #584]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b6:	4b8f      	ldr	r3, [pc, #572]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x58>
 80012c2:	4b8c      	ldr	r3, [pc, #560]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d06c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x126>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d168      	bne.n	80013b6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e22d      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x70>
 80012f2:	4b80      	ldr	r3, [pc, #512]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7f      	ldr	r2, [pc, #508]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e02e      	b.n	800135e <HAL_RCC_OscConfig+0xce>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10c      	bne.n	8001322 <HAL_RCC_OscConfig+0x92>
 8001308:	4b7a      	ldr	r3, [pc, #488]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a79      	ldr	r2, [pc, #484]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a76      	ldr	r2, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e01d      	b.n	800135e <HAL_RCC_OscConfig+0xce>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0xb6>
 800132c:	4b71      	ldr	r3, [pc, #452]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a70      	ldr	r2, [pc, #448]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b6e      	ldr	r3, [pc, #440]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a6d      	ldr	r2, [pc, #436]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0xce>
 8001346:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6a      	ldr	r2, [pc, #424]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800134c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a67      	ldr	r2, [pc, #412]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d013      	beq.n	800138e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fce1 	bl	8000d2c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136e:	f7ff fcdd 	bl	8000d2c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1e1      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001380:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0xde>
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff fccd 	bl	8000d2c <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fcc9 	bl	8000d2c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	; 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e1cd      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a8:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x106>
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d063      	beq.n	800148c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013c4:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013d0:	4b48      	ldr	r3, [pc, #288]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d11c      	bne.n	8001416 <HAL_RCC_OscConfig+0x186>
 80013dc:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d116      	bne.n	8001416 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e8:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x170>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e1a1      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4939      	ldr	r1, [pc, #228]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	e03a      	b.n	800148c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d020      	beq.n	8001460 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <HAL_RCC_OscConfig+0x268>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fc82 	bl	8000d2c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff fc7e 	bl	8000d2c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e182      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4926      	ldr	r1, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
 800145e:	e015      	b.n	800148c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_RCC_OscConfig+0x268>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fc61 	bl	8000d2c <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fc5d 	bl	8000d2c <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e161      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d039      	beq.n	800150c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d019      	beq.n	80014d4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fc41 	bl	8000d2c <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ae:	f7ff fc3d 	bl	8000d2c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e141      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_RCC_OscConfig+0x264>)
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f000 facb 	bl	8001a68 <RCC_Delay>
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fc27 	bl	8000d2c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff fc23 	bl	8000d2c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d907      	bls.n	8001500 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e127      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
 80014f4:	40021000 	.word	0x40021000
 80014f8:	42420000 	.word	0x42420000
 80014fc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	4b92      	ldr	r3, [pc, #584]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ea      	bne.n	80014e2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a6 	beq.w	8001666 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151e:	4b8b      	ldr	r3, [pc, #556]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10d      	bne.n	8001546 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b88      	ldr	r3, [pc, #544]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a87      	ldr	r2, [pc, #540]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]
 8001536:	4b85      	ldr	r3, [pc, #532]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b82      	ldr	r3, [pc, #520]	; (8001750 <HAL_RCC_OscConfig+0x4c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001552:	4b7f      	ldr	r3, [pc, #508]	; (8001750 <HAL_RCC_OscConfig+0x4c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7e      	ldr	r2, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x4c0>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7ff fbe5 	bl	8000d2c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001566:	f7ff fbe1 	bl	8000d2c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0e5      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	4b75      	ldr	r3, [pc, #468]	; (8001750 <HAL_RCC_OscConfig+0x4c0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d106      	bne.n	800159a <HAL_RCC_OscConfig+0x30a>
 800158c:	4b6f      	ldr	r3, [pc, #444]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a6e      	ldr	r2, [pc, #440]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	e02d      	b.n	80015f6 <HAL_RCC_OscConfig+0x366>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x32c>
 80015a2:	4b6a      	ldr	r3, [pc, #424]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a69      	ldr	r2, [pc, #420]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6213      	str	r3, [r2, #32]
 80015ae:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4a66      	ldr	r2, [pc, #408]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	6213      	str	r3, [r2, #32]
 80015ba:	e01c      	b.n	80015f6 <HAL_RCC_OscConfig+0x366>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x34e>
 80015c4:	4b61      	ldr	r3, [pc, #388]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4a60      	ldr	r2, [pc, #384]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6213      	str	r3, [r2, #32]
 80015d0:	4b5e      	ldr	r3, [pc, #376]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4a5d      	ldr	r2, [pc, #372]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6213      	str	r3, [r2, #32]
 80015dc:	e00b      	b.n	80015f6 <HAL_RCC_OscConfig+0x366>
 80015de:	4b5b      	ldr	r3, [pc, #364]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4a5a      	ldr	r2, [pc, #360]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6213      	str	r3, [r2, #32]
 80015ea:	4b58      	ldr	r3, [pc, #352]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a57      	ldr	r2, [pc, #348]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb95 	bl	8000d2c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb91 	bl	8000d2c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e093      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ee      	beq.n	8001606 <HAL_RCC_OscConfig+0x376>
 8001628:	e014      	b.n	8001654 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb7f 	bl	8000d2c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fb7b 	bl	8000d2c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e07d      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	4b40      	ldr	r3, [pc, #256]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a3b      	ldr	r2, [pc, #236]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d069      	beq.n	8001742 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d061      	beq.n	800173e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d146      	bne.n	8001710 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb50 	bl	8000d2c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb4c 	bl	8000d2c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e050      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b6:	d108      	bne.n	80016ca <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4921      	ldr	r1, [pc, #132]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a19      	ldr	r1, [r3, #32]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	430b      	orrs	r3, r1
 80016dc:	491b      	ldr	r1, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb20 	bl	8000d2c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb1c 	bl	8000d2c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e020      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x460>
 800170e:	e018      	b.n	8001742 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fb09 	bl	8000d2c <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff fb05 	bl	8000d2c <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e009      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_RCC_OscConfig+0x4bc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x48e>
 800173c:	e001      	b.n	8001742 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	40007000 	.word	0x40007000
 8001754:	42420060 	.word	0x42420060

08001758 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001766:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d910      	bls.n	8001796 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001774:	4b7a      	ldr	r3, [pc, #488]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 0207 	bic.w	r2, r3, #7
 800177c:	4978      	ldr	r1, [pc, #480]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001784:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0e0      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d020      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ae:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a6c      	ldr	r2, [pc, #432]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80017b4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017b8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c6:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80017cc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017d0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d2:	4b64      	ldr	r3, [pc, #400]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	4961      	ldr	r1, [pc, #388]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d06a      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f8:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d115      	bne.n	8001830 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0a7      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d107      	bne.n	8001820 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001810:	4b54      	ldr	r3, [pc, #336]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e09b      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e093      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 0203 	bic.w	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4949      	ldr	r1, [pc, #292]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001842:	f7ff fa73 	bl	8000d2c <HAL_GetTick>
 8001846:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d112      	bne.n	8001876 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001852:	f7ff fa6b 	bl	8000d2c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e077      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_ClockConfig+0xfa>
 8001874:	e027      	b.n	80018c6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d11d      	bne.n	80018ba <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff fa54 	bl	8000d2c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e060      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001896:	4b33      	ldr	r3, [pc, #204]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d1ee      	bne.n	8001880 <HAL_RCC_ClockConfig+0x128>
 80018a2:	e010      	b.n	80018c6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff fa42 	bl	8000d2c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04e      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ba:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ee      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d210      	bcs.n	80018f6 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0207 	bic.w	r2, r3, #7
 80018dc:	4920      	ldr	r1, [pc, #128]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_RCC_ClockConfig+0x208>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e030      	b.n	8001958 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4915      	ldr	r1, [pc, #84]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	490d      	ldr	r1, [pc, #52]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001934:	f000 f81c 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x20c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	4908      	ldr	r1, [pc, #32]	; (8001968 <HAL_RCC_ClockConfig+0x210>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_RCC_ClockConfig+0x214>)
 800194e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff f9a9 	bl	8000ca8 <HAL_InitTick>
  
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40022000 	.word	0x40022000
 8001964:	40021000 	.word	0x40021000
 8001968:	0800265c 	.word	0x0800265c
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b490      	push	{r4, r7}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xac>)
 8001978:	1d3c      	adds	r4, r7, #4
 800197a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800197c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001980:	f240 2301 	movw	r3, #513	; 0x201
 8001984:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xb0>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x40>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x46>
 80019ae:	e02b      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019b2:	623b      	str	r3, [r7, #32]
      break;
 80019b4:	e02b      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3328      	adds	r3, #40	; 0x28
 80019c0:	443b      	add	r3, r7
 80019c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d012      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	0c5b      	lsrs	r3, r3, #17
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	3328      	adds	r3, #40	; 0x28
 80019de:	443b      	add	r3, r7
 80019e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019e4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e004      	b.n	8001a02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	623b      	str	r3, [r7, #32]
      break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a0a:	623b      	str	r3, [r7, #32]
      break;
 8001a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc90      	pop	{r4, r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	0800264c 	.word	0x0800264c
 8001a20:	40021000 	.word	0x40021000
 8001a24:	007a1200 	.word	0x007a1200
 8001a28:	003d0900 	.word	0x003d0900

08001a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000000 	.word	0x20000000

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff fff2 	bl	8001a2c <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0adb      	lsrs	r3, r3, #11
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	0800266c 	.word	0x0800266c

08001a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <RCC_Delay+0x38>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <RCC_Delay+0x3c>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001a84:	bf00      	nop
}
 8001a86:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	60fa      	str	r2, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f8      	bne.n	8001a84 <RCC_Delay+0x1c>
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	10624dd3 	.word	0x10624dd3

08001aa8 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e01d      	b.n	8001af6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe ffe2 	bl	8000a98 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 fa0e 	bl	8001f08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e01d      	b.n	8001b4c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d106      	bne.n	8001b2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7fe ff99 	bl	8000a5c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f000 f9e3 	bl	8001f08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	6839      	ldr	r1, [r7, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fc79 	bl	800245e <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_TIM_PWM_Start+0x4c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d107      	bne.n	8001b86 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012c00 	.word	0x40012c00

08001ba4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e0b4      	b.n	8001d28 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	f200 809f 	bhi.w	8001d14 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c11 	.word	0x08001c11
 8001be0:	08001d15 	.word	0x08001d15
 8001be4:	08001d15 	.word	0x08001d15
 8001be8:	08001d15 	.word	0x08001d15
 8001bec:	08001c51 	.word	0x08001c51
 8001bf0:	08001d15 	.word	0x08001d15
 8001bf4:	08001d15 	.word	0x08001d15
 8001bf8:	08001d15 	.word	0x08001d15
 8001bfc:	08001c93 	.word	0x08001c93
 8001c00:	08001d15 	.word	0x08001d15
 8001c04:	08001d15 	.word	0x08001d15
 8001c08:	08001d15 	.word	0x08001d15
 8001c0c:	08001cd3 	.word	0x08001cd3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f9dc 	bl	8001fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0208 	orr.w	r2, r2, #8
 8001c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6999      	ldr	r1, [r3, #24]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	619a      	str	r2, [r3, #24]
    }
    break;
 8001c4e:	e062      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fa28 	bl	80020ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6999      	ldr	r1, [r3, #24]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	021a      	lsls	r2, r3, #8
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	619a      	str	r2, [r3, #24]
    }
    break;
 8001c90:	e041      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fa77 	bl	800218c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0208 	orr.w	r2, r2, #8
 8001cac:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0204 	bic.w	r2, r2, #4
 8001cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69d9      	ldr	r1, [r3, #28]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	61da      	str	r2, [r3, #28]
    }
    break;
 8001cd0:	e021      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fac7 	bl	800226c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cec:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69d9      	ldr	r1, [r3, #28]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	021a      	lsls	r2, r3, #8
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	61da      	str	r2, [r3, #28]
    }
    break;
 8001d12:	e000      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001d14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_TIM_ConfigClockSource+0x1c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0d8      	b.n	8001efe <HAL_TIM_ConfigClockSource+0x1ce>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d84:	d052      	beq.n	8001e2c <HAL_TIM_ConfigClockSource+0xfc>
 8001d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8a:	f200 80ae 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d92:	d027      	beq.n	8001de4 <HAL_TIM_ConfigClockSource+0xb4>
 8001d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d98:	f200 80a7 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001d9c:	2b70      	cmp	r3, #112	; 0x70
 8001d9e:	d02a      	beq.n	8001df6 <HAL_TIM_ConfigClockSource+0xc6>
 8001da0:	2b70      	cmp	r3, #112	; 0x70
 8001da2:	f200 80a2 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001da6:	2b60      	cmp	r3, #96	; 0x60
 8001da8:	d063      	beq.n	8001e72 <HAL_TIM_ConfigClockSource+0x142>
 8001daa:	2b60      	cmp	r3, #96	; 0x60
 8001dac:	f200 809d 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001db0:	2b50      	cmp	r3, #80	; 0x50
 8001db2:	d04e      	beq.n	8001e52 <HAL_TIM_ConfigClockSource+0x122>
 8001db4:	2b50      	cmp	r3, #80	; 0x50
 8001db6:	f200 8098 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d069      	beq.n	8001e92 <HAL_TIM_ConfigClockSource+0x162>
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	f200 8093 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001dc4:	2b30      	cmp	r3, #48	; 0x30
 8001dc6:	f000 8089 	beq.w	8001edc <HAL_TIM_ConfigClockSource+0x1ac>
 8001dca:	2b30      	cmp	r3, #48	; 0x30
 8001dcc:	f200 808d 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d07c      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0x19e>
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	f200 8088 	bhi.w	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d069      	beq.n	8001eb2 <HAL_TIM_ConfigClockSource+0x182>
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	d06e      	beq.n	8001ec0 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001de2:	e082      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0207 	bic.w	r2, r2, #7
 8001df2:	609a      	str	r2, [r3, #8]
    break;
 8001df4:	e07a      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f000 fb09 	bl	800241c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	609a      	str	r2, [r3, #8]
    break;
 8001e2a:	e05f      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f000 faee 	bl	800241c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e4e:	609a      	str	r2, [r3, #8]
    break;
 8001e50:	e04c      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f000 fa58 	bl	8002314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2150      	movs	r1, #80	; 0x50
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fab7 	bl	80023de <TIM_ITRx_SetConfig>
    break;
 8001e70:	e03c      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6859      	ldr	r1, [r3, #4]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f000 fa7a 	bl	8002378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2160      	movs	r1, #96	; 0x60
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 faa7 	bl	80023de <TIM_ITRx_SetConfig>
    break;
 8001e90:	e02c      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f000 fa38 	bl	8002314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fa97 	bl	80023de <TIM_ITRx_SetConfig>
    break;
 8001eb0:	e01c      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fa90 	bl	80023de <TIM_ITRx_SetConfig>
    break;
 8001ebe:	e015      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fa89 	bl	80023de <TIM_ITRx_SetConfig>
    break;
 8001ecc:	e00e      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2120      	movs	r1, #32
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fa82 	bl	80023de <TIM_ITRx_SetConfig>
    break;
 8001eda:	e007      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2130      	movs	r1, #48	; 0x30
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fa7b 	bl	80023de <TIM_ITRx_SetConfig>
    break;
 8001ee8:	e000      	b.n	8001eec <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8001eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <TIM_Base_SetConfig+0xc0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00b      	beq.n	8001f3c <TIM_Base_SetConfig+0x34>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2a:	d007      	beq.n	8001f3c <TIM_Base_SetConfig+0x34>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <TIM_Base_SetConfig+0xc4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d003      	beq.n	8001f3c <TIM_Base_SetConfig+0x34>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <TIM_Base_SetConfig+0xc8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d108      	bne.n	8001f4e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <TIM_Base_SetConfig+0xc0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <TIM_Base_SetConfig+0x66>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d007      	beq.n	8001f6e <TIM_Base_SetConfig+0x66>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <TIM_Base_SetConfig+0xc4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <TIM_Base_SetConfig+0x66>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <TIM_Base_SetConfig+0xc8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f86:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <TIM_Base_SetConfig+0xc0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d103      	bne.n	8001fb8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f023 0201 	bic.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0303 	bic.w	r3, r3, #3
 8002016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <TIM_OC1_SetConfig+0xd4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10c      	bne.n	8002056 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0308 	bic.w	r3, r3, #8
 8002042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <TIM_OC1_SetConfig+0xd4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d111      	bne.n	8002082 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800206c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	621a      	str	r2, [r3, #32]
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00

080020ac <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0210 	bic.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f023 0320 	bic.w	r3, r3, #32
 8002102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <TIM_OC2_SetConfig+0xdc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10d      	bne.n	8002134 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800211e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002132:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <TIM_OC2_SetConfig+0xdc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d113      	bne.n	8002164 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800214a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	621a      	str	r2, [r3, #32]
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40012c00 	.word	0x40012c00

0800218c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <TIM_OC3_SetConfig+0xdc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10d      	bne.n	8002212 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002210:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <TIM_OC3_SetConfig+0xdc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d113      	bne.n	8002242 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	621a      	str	r2, [r3, #32]
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40012c00 	.word	0x40012c00

0800226c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ae:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	031b      	lsls	r3, r3, #12
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <TIM_OC4_SetConfig+0xa4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d109      	bne.n	80022ec <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	019b      	lsls	r3, r3, #6
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	621a      	str	r2, [r3, #32]
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40012c00 	.word	0x40012c00

08002314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f023 0201 	bic.w	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002346:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f023 030a 	bic.w	r3, r3, #10
 8002358:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	621a      	str	r2, [r3, #32]
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f023 0210 	bic.w	r2, r3, #16
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	031b      	lsls	r3, r3, #12
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	621a      	str	r2, [r3, #32]
}
 80023d4:	bf00      	nop
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	f043 0307 	orr.w	r3, r3, #7
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	609a      	str	r2, [r3, #8]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800243a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	021a      	lsls	r2, r3, #8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	431a      	orrs	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800245e:	b480      	push	{r7}
 8002460:	b087      	sub	sp, #28
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800246e:	2201      	movs	r2, #1
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	431a      	orrs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	621a      	str	r2, [r3, #32]
}
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e044      	b.n	8002548 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002566:	2302      	movs	r3, #2
 8002568:	e032      	b.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002588:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025aa:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
	...

080025dc <__libc_init_array>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	2600      	movs	r6, #0
 80025e0:	4d0c      	ldr	r5, [pc, #48]	; (8002614 <__libc_init_array+0x38>)
 80025e2:	4c0d      	ldr	r4, [pc, #52]	; (8002618 <__libc_init_array+0x3c>)
 80025e4:	1b64      	subs	r4, r4, r5
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	42a6      	cmp	r6, r4
 80025ea:	d109      	bne.n	8002600 <__libc_init_array+0x24>
 80025ec:	f000 f822 	bl	8002634 <_init>
 80025f0:	2600      	movs	r6, #0
 80025f2:	4d0a      	ldr	r5, [pc, #40]	; (800261c <__libc_init_array+0x40>)
 80025f4:	4c0a      	ldr	r4, [pc, #40]	; (8002620 <__libc_init_array+0x44>)
 80025f6:	1b64      	subs	r4, r4, r5
 80025f8:	10a4      	asrs	r4, r4, #2
 80025fa:	42a6      	cmp	r6, r4
 80025fc:	d105      	bne.n	800260a <__libc_init_array+0x2e>
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
 8002600:	f855 3b04 	ldr.w	r3, [r5], #4
 8002604:	4798      	blx	r3
 8002606:	3601      	adds	r6, #1
 8002608:	e7ee      	b.n	80025e8 <__libc_init_array+0xc>
 800260a:	f855 3b04 	ldr.w	r3, [r5], #4
 800260e:	4798      	blx	r3
 8002610:	3601      	adds	r6, #1
 8002612:	e7f2      	b.n	80025fa <__libc_init_array+0x1e>
 8002614:	08002674 	.word	0x08002674
 8002618:	08002674 	.word	0x08002674
 800261c:	08002674 	.word	0x08002674
 8002620:	08002678 	.word	0x08002678

08002624 <memset>:
 8002624:	4603      	mov	r3, r0
 8002626:	4402      	add	r2, r0
 8002628:	4293      	cmp	r3, r2
 800262a:	d100      	bne.n	800262e <memset+0xa>
 800262c:	4770      	bx	lr
 800262e:	f803 1b01 	strb.w	r1, [r3], #1
 8002632:	e7f9      	b.n	8002628 <memset+0x4>

08002634 <_init>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	bf00      	nop
 8002638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263a:	bc08      	pop	{r3}
 800263c:	469e      	mov	lr, r3
 800263e:	4770      	bx	lr

08002640 <_fini>:
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	bf00      	nop
 8002644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002646:	bc08      	pop	{r3}
 8002648:	469e      	mov	lr, r3
 800264a:	4770      	bx	lr
