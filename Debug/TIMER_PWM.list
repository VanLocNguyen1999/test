
TIMER_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f4  080026f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026f4  080026f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f4  080026f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002708  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002708  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074cc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a0  00000000  00000000  00027501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  000289a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  000292a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014cb8  00000000  00000000  00029b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e29  00000000  00000000  0003e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f738  00000000  00000000  000475e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002544  00000000  00000000  000b6d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026b4 	.word	0x080026b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026b4 	.word	0x080026b4

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fbc5 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8a4 	bl	8000666 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f9e3 	bl	80008e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000522:	f000 f96d 	bl	8000800 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000526:	f000 f8d9 	bl	80006dc <MX_TIM1_Init>
  HBridge L293D_chanel1;
  HBridge L293D_chanel2;
  PWMController pwm1;
  PWMController pwm2;

  HBridge_Init(&L293D_chanel1, in1_pin1_Pin, in2_pin1_Pin, &pwm1);
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	f107 0018 	add.w	r0, r7, #24
 8000532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	f000 f835 	bl	80005a8 <HBridge_Init>
  HBridge_Init(&L293D_chanel2, in1_pin2_Pin, in2_pin2_Pin, &pwm2);
 800053e:	463b      	mov	r3, r7
 8000540:	f107 0010 	add.w	r0, r7, #16
 8000544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	f000 f82c 	bl	80005a8 <HBridge_Init>

  PWMController_Init(&pwm1, &htim1, TIM_CHANNEL_1, 1000, 0.4);
 8000550:	f107 0008 	add.w	r0, r7, #8
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <main+0x68>)
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055c:	2200      	movs	r2, #0
 800055e:	4907      	ldr	r1, [pc, #28]	; (800057c <main+0x6c>)
 8000560:	f000 f839 	bl	80005d6 <PWMController_Init>
  PWMController_Init(&pwm2, &htim1, TIM_CHANNEL_2, 1000, 0.4);
 8000564:	4638      	mov	r0, r7
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <main+0x68>)
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	2204      	movs	r2, #4
 8000570:	4902      	ldr	r1, [pc, #8]	; (800057c <main+0x6c>)
 8000572:	f000 f830 	bl	80005d6 <PWMController_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	e7fe      	b.n	8000576 <main+0x66>
 8000578:	3ecccccd 	.word	0x3ecccccd
 800057c:	20000028 	.word	0x20000028

08000580 <HAL_GPIO_EXTI_Callback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d104      	bne.n	800059a <HAL_GPIO_EXTI_Callback+0x1a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000596:	f000 fe91 	bl	80012bc <HAL_GPIO_TogglePin>
	}

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40010c00 	.word	0x40010c00

080005a8 <HBridge_Init>:
void Motor_Backward(void){

	 HBridge_Backward(&L293D_chanel1);
	 HBridge_Backward(&L293D_chanel2);
}
void HBridge_Init(HBridge *hbridge, uint16_t in1_pin, uint16_t in2_pin, PWMController *pwm) {
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	4613      	mov	r3, r2
 80005b8:	813b      	strh	r3, [r7, #8]

    hbridge->in1_pin = in1_pin;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	897a      	ldrh	r2, [r7, #10]
 80005be:	801a      	strh	r2, [r3, #0]
    hbridge->in2_pin = in2_pin;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	893a      	ldrh	r2, [r7, #8]
 80005c4:	805a      	strh	r2, [r3, #2]
    hbridge->pwm = pwm;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	605a      	str	r2, [r3, #4]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <PWMController_Init>:
    HAL_GPIO_WritePin(GPIOB,hbridge->in1_pin, 0);
    HAL_GPIO_WritePin(GPIOB,hbridge->in2_pin, 1);
}


void PWMController_Init(PWMController *pwm, TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency, float dutyCycle) {
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b088      	sub	sp, #32
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	603b      	str	r3, [r7, #0]

	pwm->htim = htim;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	601a      	str	r2, [r3, #0]
	pwm->htim->Instance->ARR = (HAL_RCC_GetPCLK2Freq() / frequency  );
 80005ea:	f001 fa69 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 80005ee:	4601      	mov	r1, r0
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	fbb1 f2f2 	udiv	r2, r1, r2
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
    uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // Lấy tần số clock của Timer
 80005fe:	f001 fa5f 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 8000602:	61f8      	str	r0, [r7, #28]
    uint32_t prescaler = timerClock / frequency - 1;
 8000604:	69fa      	ldr	r2, [r7, #28]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
 800060c:	3b01      	subs	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
    uint32_t pulse = (pwm->htim->Instance->ARR + 1) * dutyCycle;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000618:	3301      	adds	r3, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff00 	bl	8000420 <__aeabi_ui2f>
 8000620:	4603      	mov	r3, r0
 8000622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fd91 	bl	800014c <__aeabi_fmul>
 800062a:	4603      	mov	r3, r0
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff4f 	bl	80004d0 <__aeabi_f2uiz>
 8000632:	4603      	mov	r3, r0
 8000634:	617b      	str	r3, [r7, #20]
    pwm->channel = channel;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	605a      	str	r2, [r3, #4]
    pwm->htim->Init.Prescaler = prescaler;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	69ba      	ldr	r2, [r7, #24]
 8000642:	605a      	str	r2, [r3, #4]
    pwm->htim->Instance->CCR1 = pulse;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(pwm->htim, pwm->channel);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4619      	mov	r1, r3
 8000658:	4610      	mov	r0, r2
 800065a:	f001 fabb 	bl	8001bd4 <HAL_TIM_PWM_Start>
}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b090      	sub	sp, #64	; 0x40
 800066a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	2228      	movs	r2, #40	; 0x28
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f815 	bl	80026a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe37 	bl	8001310 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006a8:	f000 f998 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f887 	bl	80017d8 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006d0:	f000 f984 	bl	80009dc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3740      	adds	r7, #64	; 0x40
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b090      	sub	sp, #64	; 0x40
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
 80006fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000712:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <MX_TIM1_Init+0x11c>)
 8000714:	4a39      	ldr	r2, [pc, #228]	; (80007fc <MX_TIM1_Init+0x120>)
 8000716:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000718:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <MX_TIM1_Init+0x11c>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800071e:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_TIM1_Init+0x11c>)
 8000720:	2260      	movs	r2, #96	; 0x60
 8000722:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <MX_TIM1_Init+0x11c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <MX_TIM1_Init+0x11c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <MX_TIM1_Init+0x11c>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <MX_TIM1_Init+0x11c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800073c:	482e      	ldr	r0, [pc, #184]	; (80007f8 <MX_TIM1_Init+0x11c>)
 800073e:	f001 fa1e 	bl	8001b7e <HAL_TIM_PWM_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000748:	f000 f948 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000754:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000758:	4619      	mov	r1, r3
 800075a:	4827      	ldr	r0, [pc, #156]	; (80007f8 <MX_TIM1_Init+0x11c>)
 800075c:	f001 ff39 	bl	80025d2 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000766:	f000 f939 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076a:	2360      	movs	r3, #96	; 0x60
 800076c:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <MX_TIM1_Init+0x11c>)
 8000790:	f001 fa48 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800079a:	f000 f91f 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2204      	movs	r2, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <MX_TIM1_Init+0x11c>)
 80007a8:	f001 fa3c 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80007b2:	f000 f913 	bl	80009dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM1_Init+0x11c>)
 80007da:	f001 fea2 	bl	8002522 <HAL_TIMEx_ConfigBreakDeadTime>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80007e4:	f000 f8fa 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM1_Init+0x11c>)
 80007ea:	f000 f969 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 80007ee:	bf00      	nop
 80007f0:	3740      	adds	r7, #64	; 0x40
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40012c00 	.word	0x40012c00

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <MX_TIM2_Init+0xe4>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <MX_TIM2_Init+0xe4>)
 800083a:	2203      	movs	r2, #3
 800083c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <MX_TIM2_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000844:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <MX_TIM2_Init+0xe4>)
 8000846:	22c8      	movs	r2, #200	; 0xc8
 8000848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_TIM2_Init+0xe4>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <MX_TIM2_Init+0xe4>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000856:	4823      	ldr	r0, [pc, #140]	; (80008e4 <MX_TIM2_Init+0xe4>)
 8000858:	f001 f966 	bl	8001b28 <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000862:	f000 f8bb 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000870:	4619      	mov	r1, r3
 8000872:	481c      	ldr	r0, [pc, #112]	; (80008e4 <MX_TIM2_Init+0xe4>)
 8000874:	f001 fa9c 	bl	8001db0 <HAL_TIM_ConfigClockSource>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800087e:	f000 f8ad 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000882:	4818      	ldr	r0, [pc, #96]	; (80008e4 <MX_TIM2_Init+0xe4>)
 8000884:	f001 f97b 	bl	8001b7e <HAL_TIM_PWM_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800088e:	f000 f8a5 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4619      	mov	r1, r3
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_TIM2_Init+0xe4>)
 80008a2:	f001 fe96 	bl	80025d2 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80008ac:	f000 f896 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b0:	2360      	movs	r3, #96	; 0x60
 80008b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	4619      	mov	r1, r3
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM2_Init+0xe4>)
 80008c8:	f001 f9ac 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80008d2:	f000 f883 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM2_Init+0xe4>)
 80008d8:	f000 f8f2 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 80008dc:	bf00      	nop
 80008de:	3738      	adds	r7, #56	; 0x38
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000068 	.word	0x20000068

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <MX_GPIO_Init+0xe8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a33      	ldr	r2, [pc, #204]	; (80009d0 <MX_GPIO_Init+0xe8>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_GPIO_Init+0xe8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_GPIO_Init+0xe8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <MX_GPIO_Init+0xe8>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_GPIO_Init+0xe8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000932:	4828      	ldr	r0, [pc, #160]	; (80009d4 <MX_GPIO_Init+0xec>)
 8000934:	f000 fcaa 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000938:	2301      	movs	r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_GPIO_Init+0xf0>)
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4619      	mov	r1, r3
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <MX_GPIO_Init+0xec>)
 800094c:	f000 fb16 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000950:	230e      	movs	r3, #14
 8000952:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_GPIO_Init+0xf0>)
 8000956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	481c      	ldr	r0, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xec>)
 8000964:	f000 fb0a 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : in1_pin1_Pin in2_pin1_Pin in1_pin2_Pin in2_pin2_Pin */
  GPIO_InitStruct.Pin = in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin;
 8000968:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800096c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2302      	movs	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_GPIO_Init+0xec>)
 8000982:	f000 fafb 	bl	8000f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2006      	movs	r0, #6
 800098c:	f000 fabf 	bl	8000f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000990:	2006      	movs	r0, #6
 8000992:	f000 fad8 	bl	8000f46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2007      	movs	r0, #7
 800099c:	f000 fab7 	bl	8000f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f000 fad0 	bl	8000f46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2008      	movs	r0, #8
 80009ac:	f000 faaf 	bl	8000f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009b0:	2008      	movs	r0, #8
 80009b2:	f000 fac8 	bl	8000f46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2009      	movs	r0, #9
 80009bc:	f000 faa7 	bl	8000f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009c0:	2009      	movs	r0, #9
 80009c2:	f000 fac0 	bl	8000f46 <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	10110000 	.word	0x10110000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x5c>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_MspInit+0x60>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_MspInit+0x60>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010000 	.word	0x40010000

08000a4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <HAL_TIM_PWM_MspInit+0x34>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10b      	bne.n	8000a76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_TIM_PWM_MspInit+0x38>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_TIM_PWM_MspInit+0x38>)
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_TIM_PWM_MspInit+0x38>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40012c00 	.word	0x40012c00
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a98:	d10b      	bne.n	8000ab2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_TIM_Base_MspInit+0x34>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_TIM_Base_MspInit+0x34>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	61d3      	str	r3, [r2, #28]
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_TIM_Base_MspInit+0x34>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <HAL_TIM_MspPostInit+0x98>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d119      	bne.n	8000b14 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4814      	ldr	r0, [pc, #80]	; (8000b60 <HAL_TIM_MspPostInit+0xa0>)
 8000b0e:	f000 fa35 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b12:	e01c      	b.n	8000b4e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d117      	bne.n	8000b4e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_TIM_MspPostInit+0x9c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_TIM_MspPostInit+0xa0>)
 8000b4a:	f000 fa17 	bl	8000f7c <HAL_GPIO_Init>
}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <HardFault_Handler+0x4>

08000b76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <BusFault_Handler+0x4>

08000b82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <UsageFault_Handler+0x4>

08000b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8be 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f000 fb8f 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fb88 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f000 fb81 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000be6:	2008      	movs	r0, #8
 8000be8:	f000 fb7a 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <SystemInit+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <SystemInit+0x5c>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <SystemInit+0x5c>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4911      	ldr	r1, [pc, #68]	; (8000c4c <SystemInit+0x5c>)
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <SystemInit+0x60>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <SystemInit+0x5c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <SystemInit+0x5c>)
 8000c12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <SystemInit+0x5c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SystemInit+0x5c>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <SystemInit+0x5c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <SystemInit+0x5c>)
 8000c2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SystemInit+0x5c>)
 8000c36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c3a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SystemInit+0x64>)
 8000c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c42:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	f8ff0000 	.word	0xf8ff0000
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c5a:	e003      	b.n	8000c64 <LoopCopyDataInit>

08000c5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c62:	3104      	adds	r1, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c6c:	d3f6      	bcc.n	8000c5c <CopyDataInit>
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c70:	e002      	b.n	8000c78 <LoopFillZerobss>

08000c72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c74:	f842 3b04 	str.w	r3, [r2], #4

08000c78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c7c:	d3f9      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c7e:	f7ff ffb7 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f001 fceb 	bl	800265c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c86:	f7ff fc43 	bl	8000510 <main>
  bx lr
 8000c8a:	4770      	bx	lr
  ldr r3, =_sidata
 8000c8c:	080026fc 	.word	0x080026fc
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c9c:	200000ac 	.word	0x200000ac

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x28>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f91f 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe92 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f937 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f8ff 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_IncTick+0x1c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_IncTick+0x20>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <HAL_IncTick+0x20>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200000a8 	.word	0x200000a8

08000d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <HAL_GetTick+0x10>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	200000a8 	.word	0x200000a8

08000d68 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4906      	ldr	r1, [pc, #24]	; (8000df8 <NVIC_EnableIRQ+0x2c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da0b      	bge.n	8000e28 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <NVIC_SetPriority+0x4c>)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	3b04      	subs	r3, #4
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e26:	e009      	b.n	8000e3c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <NVIC_SetPriority+0x50>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff90 	bl	8000dfc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff31 	bl	8000d68 <NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff46 	bl	8000db0 <NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff39 	bl	8000dcc <NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b08b      	sub	sp, #44	; 0x2c
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9e:	e169      	b.n	8001274 <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8158 	bne.w	800126e <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a9a      	ldr	r2, [pc, #616]	; (800122c <HAL_GPIO_Init+0x2b0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d05e      	beq.n	8001086 <HAL_GPIO_Init+0x10a>
 8000fc8:	4a98      	ldr	r2, [pc, #608]	; (800122c <HAL_GPIO_Init+0x2b0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d875      	bhi.n	80010ba <HAL_GPIO_Init+0x13e>
 8000fce:	4a98      	ldr	r2, [pc, #608]	; (8001230 <HAL_GPIO_Init+0x2b4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d058      	beq.n	8001086 <HAL_GPIO_Init+0x10a>
 8000fd4:	4a96      	ldr	r2, [pc, #600]	; (8001230 <HAL_GPIO_Init+0x2b4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d86f      	bhi.n	80010ba <HAL_GPIO_Init+0x13e>
 8000fda:	4a96      	ldr	r2, [pc, #600]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d052      	beq.n	8001086 <HAL_GPIO_Init+0x10a>
 8000fe0:	4a94      	ldr	r2, [pc, #592]	; (8001234 <HAL_GPIO_Init+0x2b8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d869      	bhi.n	80010ba <HAL_GPIO_Init+0x13e>
 8000fe6:	4a94      	ldr	r2, [pc, #592]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <HAL_GPIO_Init+0x10a>
 8000fec:	4a92      	ldr	r2, [pc, #584]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d863      	bhi.n	80010ba <HAL_GPIO_Init+0x13e>
 8000ff2:	4a92      	ldr	r2, [pc, #584]	; (800123c <HAL_GPIO_Init+0x2c0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d046      	beq.n	8001086 <HAL_GPIO_Init+0x10a>
 8000ff8:	4a90      	ldr	r2, [pc, #576]	; (800123c <HAL_GPIO_Init+0x2c0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d85d      	bhi.n	80010ba <HAL_GPIO_Init+0x13e>
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d82a      	bhi.n	8001058 <HAL_GPIO_Init+0xdc>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d859      	bhi.n	80010ba <HAL_GPIO_Init+0x13e>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <HAL_GPIO_Init+0x90>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001087 	.word	0x08001087
 8001010:	08001061 	.word	0x08001061
 8001014:	08001073 	.word	0x08001073
 8001018:	080010b5 	.word	0x080010b5
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010bb 	.word	0x080010bb
 8001024:	080010bb 	.word	0x080010bb
 8001028:	080010bb 	.word	0x080010bb
 800102c:	080010bb 	.word	0x080010bb
 8001030:	080010bb 	.word	0x080010bb
 8001034:	080010bb 	.word	0x080010bb
 8001038:	080010bb 	.word	0x080010bb
 800103c:	080010bb 	.word	0x080010bb
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010bb 	.word	0x080010bb
 8001048:	080010bb 	.word	0x080010bb
 800104c:	080010bb 	.word	0x080010bb
 8001050:	08001069 	.word	0x08001069
 8001054:	0800107d 	.word	0x0800107d
 8001058:	4a79      	ldr	r2, [pc, #484]	; (8001240 <HAL_GPIO_Init+0x2c4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800105e:	e02c      	b.n	80010ba <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e029      	b.n	80010bc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	3304      	adds	r3, #4
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e024      	b.n	80010bc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	3308      	adds	r3, #8
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e01f      	b.n	80010bc <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	330c      	adds	r3, #12
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e01a      	b.n	80010bc <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800108e:	2304      	movs	r3, #4
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e013      	b.n	80010bc <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	611a      	str	r2, [r3, #16]
          break;
 80010a6:	e009      	b.n	80010bc <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	615a      	str	r2, [r3, #20]
          break;
 80010b2:	e003      	b.n	80010bc <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x140>
          break;
 80010ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	; 0xff
 80010c0:	d801      	bhi.n	80010c6 <HAL_GPIO_Init+0x14a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	e001      	b.n	80010ca <HAL_GPIO_Init+0x14e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	; 0xff
 80010d0:	d802      	bhi.n	80010d8 <HAL_GPIO_Init+0x15c>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x162>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	3b08      	subs	r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	210f      	movs	r1, #15
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	6a39      	ldr	r1, [r7, #32]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80b1 	beq.w	800126e <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800110c:	4b4d      	ldr	r3, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a40      	ldr	r2, [pc, #256]	; (800124c <HAL_GPIO_Init+0x2d0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_GPIO_Init+0x1fc>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <HAL_GPIO_Init+0x2d4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1f8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <HAL_GPIO_Init+0x2d8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1f4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1f0>
 8001168:	2303      	movs	r3, #3
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1fe>
 800116c:	2304      	movs	r3, #4
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1fe>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1fe>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1fe>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4313      	orrs	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	492c      	ldr	r1, [pc, #176]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4928      	ldr	r1, [pc, #160]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4922      	ldr	r1, [pc, #136]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491e      	ldr	r1, [pc, #120]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	4918      	ldr	r1, [pc, #96]	; (800125c <HAL_GPIO_Init+0x2e0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_GPIO_Init+0x2e0>)
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4914      	ldr	r1, [pc, #80]	; (800125c <HAL_GPIO_Init+0x2e0>)
 800120c:	4013      	ands	r3, r2
 800120e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_GPIO_Init+0x2e0>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <HAL_GPIO_Init+0x2e0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	60cb      	str	r3, [r1, #12]
 8001228:	e021      	b.n	800126e <HAL_GPIO_Init+0x2f2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_GPIO_Init+0x30c>)
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	43db      	mvns	r3, r3
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <HAL_GPIO_Init+0x30c>)
 800126a:	4013      	ands	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f67f ae92 	bls.w	8000fa0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	372c      	adds	r7, #44	; 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	611a      	str	r2, [r3, #16]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	405a      	eors	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	60da      	str	r2, [r3, #12]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f93e 	bl	8000580 <HAL_GPIO_EXTI_Callback>
  }
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8087 	beq.w	8001438 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800132a:	4b92      	ldr	r3, [pc, #584]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d00c      	beq.n	8001350 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001336:	4b8f      	ldr	r3, [pc, #572]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b08      	cmp	r3, #8
 8001340:	d112      	bne.n	8001368 <HAL_RCC_OscConfig+0x58>
 8001342:	4b8c      	ldr	r3, [pc, #560]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134e:	d10b      	bne.n	8001368 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d06c      	beq.n	8001436 <HAL_RCC_OscConfig+0x126>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d168      	bne.n	8001436 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e22d      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001370:	d106      	bne.n	8001380 <HAL_RCC_OscConfig+0x70>
 8001372:	4b80      	ldr	r3, [pc, #512]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7f      	ldr	r2, [pc, #508]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e02e      	b.n	80013de <HAL_RCC_OscConfig+0xce>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x92>
 8001388:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a79      	ldr	r2, [pc, #484]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b77      	ldr	r3, [pc, #476]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a76      	ldr	r2, [pc, #472]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e01d      	b.n	80013de <HAL_RCC_OscConfig+0xce>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0xb6>
 80013ac:	4b71      	ldr	r3, [pc, #452]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a70      	ldr	r2, [pc, #448]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a6d      	ldr	r2, [pc, #436]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e00b      	b.n	80013de <HAL_RCC_OscConfig+0xce>
 80013c6:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6a      	ldr	r2, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b68      	ldr	r3, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a67      	ldr	r2, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d013      	beq.n	800140e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fcb5 	bl	8000d54 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ee:	f7ff fcb1 	bl	8000d54 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1e1      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001400:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0xde>
 800140c:	e014      	b.n	8001438 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fca1 	bl	8000d54 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001416:	f7ff fc9d 	bl	8000d54 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1cd      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001428:	4b52      	ldr	r3, [pc, #328]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x106>
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001436:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d063      	beq.n	800150c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001444:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001450:	4b48      	ldr	r3, [pc, #288]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d11c      	bne.n	8001496 <HAL_RCC_OscConfig+0x186>
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d116      	bne.n	8001496 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x170>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e1a1      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4939      	ldr	r1, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001494:	e03a      	b.n	800150c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d020      	beq.n	80014e0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x268>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc56 	bl	8000d54 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc52 	bl	8000d54 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e182      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4926      	ldr	r1, [pc, #152]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
 80014de:	e015      	b.n	800150c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_RCC_OscConfig+0x268>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fc35 	bl	8000d54 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fc31 	bl	8000d54 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e161      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d039      	beq.n	800158c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d019      	beq.n	8001554 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff fc15 	bl	8000d54 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff fc11 	bl	8000d54 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e141      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_RCC_OscConfig+0x264>)
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f000 facb 	bl	8001ae8 <RCC_Delay>
 8001552:	e01b      	b.n	800158c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x26c>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff fbfb 	bl	8000d54 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	e00e      	b.n	8001580 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001562:	f7ff fbf7 	bl	8000d54 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d907      	bls.n	8001580 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e127      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
 8001574:	40021000 	.word	0x40021000
 8001578:	42420000 	.word	0x42420000
 800157c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ea      	bne.n	8001562 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a6 	beq.w	80016e6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a87      	ldr	r2, [pc, #540]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b82      	ldr	r3, [pc, #520]	; (80017d0 <HAL_RCC_OscConfig+0x4c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x4c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x4c0>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbb9 	bl	8000d54 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fbb5 	bl	8000d54 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b64      	cmp	r3, #100	; 0x64
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0e5      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x4c0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x30a>
 800160c:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	e02d      	b.n	8001676 <HAL_RCC_OscConfig+0x366>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x32c>
 8001622:	4b6a      	ldr	r3, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a69      	ldr	r2, [pc, #420]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a66      	ldr	r2, [pc, #408]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	e01c      	b.n	8001676 <HAL_RCC_OscConfig+0x366>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x34e>
 8001644:	4b61      	ldr	r3, [pc, #388]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a60      	ldr	r2, [pc, #384]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a5d      	ldr	r2, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	e00b      	b.n	8001676 <HAL_RCC_OscConfig+0x366>
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a5a      	ldr	r2, [pc, #360]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d015      	beq.n	80016aa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff fb69 	bl	8000d54 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fb65 	bl	8000d54 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e093      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ee      	beq.n	8001686 <HAL_RCC_OscConfig+0x376>
 80016a8:	e014      	b.n	80016d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb53 	bl	8000d54 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb4f 	bl	8000d54 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e07d      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ee      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d069      	beq.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d061      	beq.n	80017be <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d146      	bne.n	8001790 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fb24 	bl	8000d54 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fb20 	bl	8000d54 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e050      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d108      	bne.n	800174a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4921      	ldr	r1, [pc, #132]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a19      	ldr	r1, [r3, #32]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	430b      	orrs	r3, r1
 800175c:	491b      	ldr	r1, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff faf4 	bl	8000d54 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff faf0 	bl	8000d54 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e020      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x460>
 800178e:	e018      	b.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fadd 	bl	8000d54 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fad9 	bl	8000d54 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e009      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_OscConfig+0x4bc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x48e>
 80017bc:	e001      	b.n	80017c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40007000 	.word	0x40007000
 80017d4:	42420060 	.word	0x42420060

080017d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017e6:	4b7e      	ldr	r3, [pc, #504]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d910      	bls.n	8001816 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f4:	4b7a      	ldr	r3, [pc, #488]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0207 	bic.w	r2, r3, #7
 80017fc:	4978      	ldr	r1, [pc, #480]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001804:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0e0      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d020      	beq.n	8001864 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182e:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a6c      	ldr	r2, [pc, #432]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001834:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001838:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 800184c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001850:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001852:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4961      	ldr	r1, [pc, #388]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d06a      	beq.n	8001946 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d107      	bne.n	8001888 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001878:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d115      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0a7      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001890:	4b54      	ldr	r3, [pc, #336]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e09b      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e093      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 0203 	bic.w	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4949      	ldr	r1, [pc, #292]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c2:	f7ff fa47 	bl	8000d54 <HAL_GetTick>
 80018c6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d112      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d2:	f7ff fa3f 	bl	8000d54 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e077      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e8:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d1ee      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xfa>
 80018f4:	e027      	b.n	8001946 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d11d      	bne.n	800193a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fa28 	bl	8000d54 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e060      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001916:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b08      	cmp	r3, #8
 8001920:	d1ee      	bne.n	8001900 <HAL_RCC_ClockConfig+0x128>
 8001922:	e010      	b.n	8001946 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff fa16 	bl	8000d54 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04e      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ee      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d210      	bcs.n	8001976 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 0207 	bic.w	r2, r3, #7
 800195c:	4920      	ldr	r1, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_ClockConfig+0x208>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e030      	b.n	80019d8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4915      	ldr	r1, [pc, #84]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	490d      	ldr	r1, [pc, #52]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b4:	f000 f81c 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x20c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	4908      	ldr	r1, [pc, #32]	; (80019e8 <HAL_RCC_ClockConfig+0x210>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_RCC_ClockConfig+0x214>)
 80019ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff f97d 	bl	8000cd0 <HAL_InitTick>
  
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40022000 	.word	0x40022000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	080026dc 	.word	0x080026dc
 80019ec:	20000000 	.word	0x20000000

080019f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b490      	push	{r4, r7}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xac>)
 80019f8:	1d3c      	adds	r4, r7, #4
 80019fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a00:	f240 2301 	movw	r3, #513	; 0x201
 8001a04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x40>
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x46>
 8001a2e:	e02b      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a32:	623b      	str	r3, [r7, #32]
      break;
 8001a34:	e02b      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	0c9b      	lsrs	r3, r3, #18
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3328      	adds	r3, #40	; 0x28
 8001a40:	443b      	add	r3, r7
 8001a42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d012      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	0c5b      	lsrs	r3, r3, #17
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	3328      	adds	r3, #40	; 0x28
 8001a5e:	443b      	add	r3, r7
 8001a60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a64:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a6a:	fb03 f202 	mul.w	r2, r3, r2
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	e004      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	623b      	str	r3, [r7, #32]
      break;
 8001a86:	e002      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a8a:	623b      	str	r3, [r7, #32]
      break;
 8001a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc90      	pop	{r4, r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	080026cc 	.word	0x080026cc
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	007a1200 	.word	0x007a1200
 8001aa8:	003d0900 	.word	0x003d0900

08001aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000000 	.word	0x20000000

08001ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac4:	f7ff fff2 	bl	8001aac <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	0adb      	lsrs	r3, r3, #11
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	080026ec 	.word	0x080026ec

08001ae8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <RCC_Delay+0x38>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <RCC_Delay+0x3c>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0a5b      	lsrs	r3, r3, #9
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001b04:	bf00      	nop
}
 8001b06:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	60fa      	str	r2, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f8      	bne.n	8001b04 <RCC_Delay+0x1c>
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000
 8001b24:	10624dd3 	.word	0x10624dd3

08001b28 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e01d      	b.n	8001b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe ff9a 	bl	8000a88 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 fa0e 	bl	8001f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e01d      	b.n	8001bcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe ff51 	bl	8000a4c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f000 f9e3 	bl	8001f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	6839      	ldr	r1, [r7, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fc79 	bl	80024de <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_TIM_PWM_Start+0x4c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d107      	bne.n	8001c06 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40012c00 	.word	0x40012c00

08001c24 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e0b4      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	f200 809f 	bhi.w	8001d94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c91 	.word	0x08001c91
 8001c60:	08001d95 	.word	0x08001d95
 8001c64:	08001d95 	.word	0x08001d95
 8001c68:	08001d95 	.word	0x08001d95
 8001c6c:	08001cd1 	.word	0x08001cd1
 8001c70:	08001d95 	.word	0x08001d95
 8001c74:	08001d95 	.word	0x08001d95
 8001c78:	08001d95 	.word	0x08001d95
 8001c7c:	08001d13 	.word	0x08001d13
 8001c80:	08001d95 	.word	0x08001d95
 8001c84:	08001d95 	.word	0x08001d95
 8001c88:	08001d95 	.word	0x08001d95
 8001c8c:	08001d53 	.word	0x08001d53
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f9dc 	bl	8002054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0204 	bic.w	r2, r2, #4
 8001cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6999      	ldr	r1, [r3, #24]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	619a      	str	r2, [r3, #24]
    }
    break;
 8001cce:	e062      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fa28 	bl	800212c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6999      	ldr	r1, [r3, #24]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	021a      	lsls	r2, r3, #8
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	619a      	str	r2, [r3, #24]
    }
    break;
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fa77 	bl	800220c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0208 	orr.w	r2, r2, #8
 8001d2c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0204 	bic.w	r2, r2, #4
 8001d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69d9      	ldr	r1, [r3, #28]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	61da      	str	r2, [r3, #28]
    }
    break;
 8001d50:	e021      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fac7 	bl	80022ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69d9      	ldr	r1, [r3, #28]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	021a      	lsls	r2, r3, #8
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	61da      	str	r2, [r3, #28]
    }
    break;
 8001d92:	e000      	b.n	8001d96 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001d94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_TIM_ConfigClockSource+0x1c>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e0d8      	b.n	8001f7e <HAL_TIM_ConfigClockSource+0x1ce>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001df2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e04:	d052      	beq.n	8001eac <HAL_TIM_ConfigClockSource+0xfc>
 8001e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e0a:	f200 80ae 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e12:	d027      	beq.n	8001e64 <HAL_TIM_ConfigClockSource+0xb4>
 8001e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e18:	f200 80a7 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e1c:	2b70      	cmp	r3, #112	; 0x70
 8001e1e:	d02a      	beq.n	8001e76 <HAL_TIM_ConfigClockSource+0xc6>
 8001e20:	2b70      	cmp	r3, #112	; 0x70
 8001e22:	f200 80a2 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e26:	2b60      	cmp	r3, #96	; 0x60
 8001e28:	d063      	beq.n	8001ef2 <HAL_TIM_ConfigClockSource+0x142>
 8001e2a:	2b60      	cmp	r3, #96	; 0x60
 8001e2c:	f200 809d 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e30:	2b50      	cmp	r3, #80	; 0x50
 8001e32:	d04e      	beq.n	8001ed2 <HAL_TIM_ConfigClockSource+0x122>
 8001e34:	2b50      	cmp	r3, #80	; 0x50
 8001e36:	f200 8098 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e3a:	2b40      	cmp	r3, #64	; 0x40
 8001e3c:	d069      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x162>
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	f200 8093 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e44:	2b30      	cmp	r3, #48	; 0x30
 8001e46:	f000 8089 	beq.w	8001f5c <HAL_TIM_ConfigClockSource+0x1ac>
 8001e4a:	2b30      	cmp	r3, #48	; 0x30
 8001e4c:	f200 808d 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d07c      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x19e>
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	f200 8088 	bhi.w	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d069      	beq.n	8001f32 <HAL_TIM_ConfigClockSource+0x182>
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d06e      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001e62:	e082      	b.n	8001f6a <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0207 	bic.w	r2, r2, #7
 8001e72:	609a      	str	r2, [r3, #8]
    break;
 8001e74:	e07a      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f000 fb09 	bl	800249c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ea0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	609a      	str	r2, [r3, #8]
    break;
 8001eaa:	e05f      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f000 faee 	bl	800249c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ece:	609a      	str	r2, [r3, #8]
    break;
 8001ed0:	e04c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f000 fa58 	bl	8002394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2150      	movs	r1, #80	; 0x50
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fab7 	bl	800245e <TIM_ITRx_SetConfig>
    break;
 8001ef0:	e03c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f000 fa7a 	bl	80023f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2160      	movs	r1, #96	; 0x60
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 faa7 	bl	800245e <TIM_ITRx_SetConfig>
    break;
 8001f10:	e02c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f000 fa38 	bl	8002394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2140      	movs	r1, #64	; 0x40
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fa97 	bl	800245e <TIM_ITRx_SetConfig>
    break;
 8001f30:	e01c      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fa90 	bl	800245e <TIM_ITRx_SetConfig>
    break;
 8001f3e:	e015      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2110      	movs	r1, #16
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fa89 	bl	800245e <TIM_ITRx_SetConfig>
    break;
 8001f4c:	e00e      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2120      	movs	r1, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fa82 	bl	800245e <TIM_ITRx_SetConfig>
    break;
 8001f5a:	e007      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2130      	movs	r1, #48	; 0x30
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fa7b 	bl	800245e <TIM_ITRx_SetConfig>
    break;
 8001f68:	e000      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8001f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <TIM_Base_SetConfig+0xc0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x34>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x34>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a27      	ldr	r2, [pc, #156]	; (800204c <TIM_Base_SetConfig+0xc4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x34>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a26      	ldr	r2, [pc, #152]	; (8002050 <TIM_Base_SetConfig+0xc8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <TIM_Base_SetConfig+0xc0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x66>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x66>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	; (800204c <TIM_Base_SetConfig+0xc4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x66>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <TIM_Base_SetConfig+0xc8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002006:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <TIM_Base_SetConfig+0xc0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d103      	bne.n	8002038 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	615a      	str	r2, [r3, #20]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800

08002054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 0201 	bic.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f023 0302 	bic.w	r3, r3, #2
 80020a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <TIM_OC1_SetConfig+0xd4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10c      	bne.n	80020d6 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f023 0308 	bic.w	r3, r3, #8
 80020c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a13      	ldr	r2, [pc, #76]	; (8002128 <TIM_OC1_SetConfig+0xd4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d111      	bne.n	8002102 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	621a      	str	r2, [r3, #32]
}
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40012c00 	.word	0x40012c00

0800212c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0210 	bic.w	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f023 0320 	bic.w	r3, r3, #32
 8002182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <TIM_OC2_SetConfig+0xdc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10d      	bne.n	80021b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800219e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b2:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a14      	ldr	r2, [pc, #80]	; (8002208 <TIM_OC2_SetConfig+0xdc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d113      	bne.n	80021e4 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	621a      	str	r2, [r3, #32]
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40012c00 	.word	0x40012c00

0800220c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <TIM_OC3_SetConfig+0xdc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d10d      	bne.n	8002292 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800227c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002290:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <TIM_OC3_SetConfig+0xdc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d113      	bne.n	80022c2 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	621a      	str	r2, [r3, #32]
}
 80022dc:	bf00      	nop
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40012c00 	.word	0x40012c00

080022ec <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002326:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002342:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	031b      	lsls	r3, r3, #12
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <TIM_OC4_SetConfig+0xa4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d109      	bne.n	800236c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800235e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40012c00 	.word	0x40012c00

08002394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f023 0201 	bic.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f023 030a 	bic.w	r3, r3, #10
 80023d8:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	621a      	str	r2, [r3, #32]
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f023 0210 	bic.w	r2, r3, #16
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800242a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800243c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	621a      	str	r2, [r3, #32]
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	f043 0307 	orr.w	r3, r3, #7
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	021a      	lsls	r2, r3, #8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024de:	b480      	push	{r7}
 80024e0:	b087      	sub	sp, #28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80024ee:	2201      	movs	r2, #1
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	43db      	mvns	r3, r3
 8002500:	401a      	ands	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	431a      	orrs	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	621a      	str	r2, [r3, #32]
}
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800253a:	2302      	movs	r3, #2
 800253c:	e044      	b.n	80025c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e032      	b.n	8002650 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002608:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800262a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
	...

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	2600      	movs	r6, #0
 8002660:	4d0c      	ldr	r5, [pc, #48]	; (8002694 <__libc_init_array+0x38>)
 8002662:	4c0d      	ldr	r4, [pc, #52]	; (8002698 <__libc_init_array+0x3c>)
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	f000 f822 	bl	80026b4 <_init>
 8002670:	2600      	movs	r6, #0
 8002672:	4d0a      	ldr	r5, [pc, #40]	; (800269c <__libc_init_array+0x40>)
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <__libc_init_array+0x44>)
 8002676:	1b64      	subs	r4, r4, r5
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	f855 3b04 	ldr.w	r3, [r5], #4
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	f855 3b04 	ldr.w	r3, [r5], #4
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	080026f4 	.word	0x080026f4
 8002698:	080026f4 	.word	0x080026f4
 800269c:	080026f4 	.word	0x080026f4
 80026a0:	080026f8 	.word	0x080026f8

080026a4 <memset>:
 80026a4:	4603      	mov	r3, r0
 80026a6:	4402      	add	r2, r0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d100      	bne.n	80026ae <memset+0xa>
 80026ac:	4770      	bx	lr
 80026ae:	f803 1b01 	strb.w	r1, [r3], #1
 80026b2:	e7f9      	b.n	80026a8 <memset+0x4>

080026b4 <_init>:
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	bf00      	nop
 80026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ba:	bc08      	pop	{r3}
 80026bc:	469e      	mov	lr, r3
 80026be:	4770      	bx	lr

080026c0 <_fini>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr
