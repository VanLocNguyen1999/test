
TIMER_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002658  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800278c  0800278c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800278c  0800278c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800278c  0800278c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080027a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080027a0  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074a3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014a0  00000000  00000000  000274d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  00028978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  00029270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d00  00000000  00000000  00029ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e1d  00000000  00000000  0003e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f837  00000000  00000000  000475dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b6e14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  000b6e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800274c 	.word	0x0800274c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800274c 	.word	0x0800274c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fc23 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f919 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa59 	bl	80009d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000522:	f000 f9e3 	bl	80008ec <MX_TIM2_Init>
  MX_TIM1_Init();
 8000526:	f000 f94f 	bl	80007c8 <MX_TIM1_Init>
  HBridge L293D_chanel1;
  HBridge L293D_chanel2;
  PWMController pwm1;
  PWMController pwm2;

  HBridge_Init(&L293D_chanel1, in1_pin1_Pin, in2_pin1_Pin, &pwm1);
 800052a:	f107 0308 	add.w	r3, r7, #8
 800052e:	f107 0018 	add.w	r0, r7, #24
 8000532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	f000 f879 	bl	8000630 <HBridge_Init>
  HBridge_Init(&L293D_chanel2, in1_pin2_Pin, in2_pin2_Pin, &pwm2);
 800053e:	463b      	mov	r3, r7
 8000540:	f107 0010 	add.w	r0, r7, #16
 8000544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	f000 f870 	bl	8000630 <HBridge_Init>

  HAL_GPIO_WritePin(GPIOB,L293D_chanel1.in1_pin, 1);
 8000550:	8b3b      	ldrh	r3, [r7, #24]
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <main+0x74>)
 8000558:	f000 fef6 	bl	8001348 <HAL_GPIO_WritePin>
  PWMController_Init(&pwm1, &htim1, TIM_CHANNEL_1, 1000, 0.4);
 800055c:	f107 0008 	add.w	r0, r7, #8
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <main+0x78>)
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	2200      	movs	r2, #0
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <main+0x7c>)
 800056c:	f000 f8a8 	bl	80006c0 <PWMController_Init>
  PWMController_Init(&pwm2, &htim1, TIM_CHANNEL_2, 1000, 0.4);
 8000570:	4638      	mov	r0, r7
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <main+0x78>)
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	2204      	movs	r2, #4
 800057c:	4903      	ldr	r1, [pc, #12]	; (800058c <main+0x7c>)
 800057e:	f000 f89f 	bl	80006c0 <PWMController_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0x72>
 8000584:	40010c00 	.word	0x40010c00
 8000588:	3ecccccd 	.word	0x3ecccccd
 800058c:	20000028 	.word	0x20000028

08000590 <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 3 */
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == Left_Pin)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	2b08      	cmp	r3, #8
 800059e:	d105      	bne.n	80005ac <HAL_GPIO_EXTI_Callback+0x1c>
    {
    	HBridge_Forward(&L293D_chanel2);
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80005a2:	f000 f85d 	bl	8000660 <HBridge_Forward>
    	HBridge_Backward(&L293D_chanel1);
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x48>)
 80005a8:	f000 f872 	bl	8000690 <HBridge_Backward>
    }
    if (GPIO_Pin == Right_Pin)
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	2b10      	cmp	r3, #16
 80005b0:	d101      	bne.n	80005b6 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Motor_Right() ;
 80005b2:	f000 f813 	bl	80005dc <Motor_Right>
    }
    if (GPIO_Pin == Forward_Pin)
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	2b20      	cmp	r3, #32
 80005ba:	d102      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0x32>
    {
    	Motor_Forward();
 80005bc:	f000 f81c 	bl	80005f8 <Motor_Forward>
    }
    else if (GPIO_Pin == Backward_Pin)
    {
    	Motor_Backward();
    }
}
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_EXTI_Callback+0x3c>
    else if (GPIO_Pin == Backward_Pin)
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b40      	cmp	r3, #64	; 0x40
 80005c6:	d101      	bne.n	80005cc <HAL_GPIO_EXTI_Callback+0x3c>
    	Motor_Backward();
 80005c8:	f000 f824 	bl	8000614 <Motor_Backward>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000b0 	.word	0x200000b0
 80005d8:	200000a8 	.word	0x200000a8

080005dc <Motor_Right>:

	HBridge_Forward(&L293D_chanel2);
	HBridge_Backward(&L293D_chanel1);
}

void Motor_Right(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	HBridge_Backward(&L293D_chanel2);
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <Motor_Right+0x14>)
 80005e2:	f000 f855 	bl	8000690 <HBridge_Backward>
	HBridge_Forward(&L293D_chanel1);
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <Motor_Right+0x18>)
 80005e8:	f000 f83a 	bl	8000660 <HBridge_Forward>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000b0 	.word	0x200000b0
 80005f4:	200000a8 	.word	0x200000a8

080005f8 <Motor_Forward>:
void Motor_Forward(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

	 HBridge_Forward(&L293D_chanel1);
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <Motor_Forward+0x14>)
 80005fe:	f000 f82f 	bl	8000660 <HBridge_Forward>
	 HBridge_Forward(&L293D_chanel2);
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <Motor_Forward+0x18>)
 8000604:	f000 f82c 	bl	8000660 <HBridge_Forward>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200000a8 	.word	0x200000a8
 8000610:	200000b0 	.word	0x200000b0

08000614 <Motor_Backward>:

void Motor_Backward(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

	 HBridge_Backward(&L293D_chanel1);
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <Motor_Backward+0x14>)
 800061a:	f000 f839 	bl	8000690 <HBridge_Backward>
	 HBridge_Backward(&L293D_chanel2);
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <Motor_Backward+0x18>)
 8000620:	f000 f836 	bl	8000690 <HBridge_Backward>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000a8 	.word	0x200000a8
 800062c:	200000b0 	.word	0x200000b0

08000630 <HBridge_Init>:
void HBridge_Init(HBridge *hbridge, uint16_t in1_pin, uint16_t in2_pin, PWMController *pwm) {
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	460b      	mov	r3, r1
 800063c:	817b      	strh	r3, [r7, #10]
 800063e:	4613      	mov	r3, r2
 8000640:	813b      	strh	r3, [r7, #8]

    hbridge->in1_pin = in1_pin;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	897a      	ldrh	r2, [r7, #10]
 8000646:	801a      	strh	r2, [r3, #0]
    hbridge->in2_pin = in2_pin;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	893a      	ldrh	r2, [r7, #8]
 800064c:	805a      	strh	r2, [r3, #2]
    hbridge->pwm = pwm;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	605a      	str	r2, [r3, #4]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
	...

08000660 <HBridge_Forward>:
void HBridge_Forward(HBridge *hbridge) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB,hbridge->in1_pin, 1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <HBridge_Forward+0x2c>)
 8000672:	f000 fe69 	bl	8001348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,hbridge->in2_pin, 0);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	885b      	ldrh	r3, [r3, #2]
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <HBridge_Forward+0x2c>)
 8000680:	f000 fe62 	bl	8001348 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40010c00 	.word	0x40010c00

08000690 <HBridge_Backward>:

void HBridge_Backward(HBridge *hbridge) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(GPIOB,hbridge->in1_pin, 0);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <HBridge_Backward+0x2c>)
 80006a2:	f000 fe51 	bl	8001348 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,hbridge->in2_pin, 1);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	885b      	ldrh	r3, [r3, #2]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4619      	mov	r1, r3
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <HBridge_Backward+0x2c>)
 80006b0:	f000 fe4a 	bl	8001348 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010c00 	.word	0x40010c00

080006c0 <PWMController_Init>:


void PWMController_Init(PWMController *pwm, TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency, float dutyCycle) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]

	pwm->htim = htim;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	601a      	str	r2, [r3, #0]
	pwm->htim->Instance->ARR = (HAL_RCC_GetPCLK2Freq() / frequency  );
 80006d4:	f001 fa40 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 80006d8:	4601      	mov	r1, r0
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	fbb1 f2f2 	udiv	r2, r1, r2
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
    uint32_t timerClock = HAL_RCC_GetPCLK2Freq(); // Lấy tần số clock của Timer
 80006e8:	f001 fa36 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 80006ec:	61f8      	str	r0, [r7, #28]
    uint32_t prescaler = timerClock / frequency - 1;
 80006ee:	69fa      	ldr	r2, [r7, #28]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	3b01      	subs	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
    uint32_t pulse = (pwm->htim->Instance->ARR + 1) * dutyCycle;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	3301      	adds	r3, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fe8b 	bl	8000420 <__aeabi_ui2f>
 800070a:	4603      	mov	r3, r0
 800070c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd1c 	bl	800014c <__aeabi_fmul>
 8000714:	4603      	mov	r3, r0
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff feda 	bl	80004d0 <__aeabi_f2uiz>
 800071c:	4603      	mov	r3, r0
 800071e:	617b      	str	r3, [r7, #20]
    pwm->channel = channel;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]
    pwm->htim->Init.Prescaler = prescaler;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	69ba      	ldr	r2, [r7, #24]
 800072c:	605a      	str	r2, [r3, #4]
    pwm->htim->Instance->CCR1 = pulse;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(pwm->htim, pwm->channel);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	4610      	mov	r0, r2
 8000744:	f001 fa92 	bl	8001c6c <HAL_TIM_PWM_Start>
}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b090      	sub	sp, #64	; 0x40
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	2228      	movs	r2, #40	; 0x28
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f001 ffec 	bl	800273c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	2301      	movs	r3, #1
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077a:	2310      	movs	r3, #16
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe0e 	bl	80013a8 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000792:	f000 f985 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f85e 	bl	8001870 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f971 	bl	8000aa0 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3740      	adds	r7, #64	; 0x40
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_TIM1_Init+0x11c>)
 8000800:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <MX_TIM1_Init+0x120>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000804:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <MX_TIM1_Init+0x11c>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800080a:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <MX_TIM1_Init+0x11c>)
 800080c:	2260      	movs	r2, #96	; 0x60
 800080e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000810:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <MX_TIM1_Init+0x11c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <MX_TIM1_Init+0x11c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800081c:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <MX_TIM1_Init+0x11c>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <MX_TIM1_Init+0x11c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000828:	482e      	ldr	r0, [pc, #184]	; (80008e4 <MX_TIM1_Init+0x11c>)
 800082a:	f001 f9f4 	bl	8001c16 <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 f934 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000840:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000844:	4619      	mov	r1, r3
 8000846:	4827      	ldr	r0, [pc, #156]	; (80008e4 <MX_TIM1_Init+0x11c>)
 8000848:	f001 ff0f 	bl	800266a <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000852:	f000 f925 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	; 0x60
 8000858:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	481a      	ldr	r0, [pc, #104]	; (80008e4 <MX_TIM1_Init+0x11c>)
 800087c:	f001 fa1e 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000886:	f000 f90b 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2204      	movs	r2, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	; (80008e4 <MX_TIM1_Init+0x11c>)
 8000894:	f001 fa12 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800089e:	f000 f8ff 	bl	8000aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM1_Init+0x11c>)
 80008c6:	f001 fe78 	bl	80025ba <HAL_TIMEx_ConfigBreakDeadTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80008d0:	f000 f8e6 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM1_Init+0x11c>)
 80008d6:	f000 f955 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3740      	adds	r7, #64	; 0x40
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000028 	.word	0x20000028
 80008e8:	40012c00 	.word	0x40012c00

080008ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_TIM2_Init+0xe4>)
 800091e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_TIM2_Init+0xe4>)
 8000926:	2203      	movs	r2, #3
 8000928:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_TIM2_Init+0xe4>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_TIM2_Init+0xe4>)
 8000932:	22c8      	movs	r2, #200	; 0xc8
 8000934:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_TIM2_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_TIM2_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000942:	4823      	ldr	r0, [pc, #140]	; (80009d0 <MX_TIM2_Init+0xe4>)
 8000944:	f001 f93c 	bl	8001bc0 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800094e:	f000 f8a7 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095c:	4619      	mov	r1, r3
 800095e:	481c      	ldr	r0, [pc, #112]	; (80009d0 <MX_TIM2_Init+0xe4>)
 8000960:	f001 fa72 	bl	8001e48 <HAL_TIM_ConfigClockSource>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800096a:	f000 f899 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <MX_TIM2_Init+0xe4>)
 8000970:	f001 f951 	bl	8001c16 <HAL_TIM_PWM_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800097a:	f000 f891 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	4619      	mov	r1, r3
 800098c:	4810      	ldr	r0, [pc, #64]	; (80009d0 <MX_TIM2_Init+0xe4>)
 800098e:	f001 fe6c 	bl	800266a <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000998:	f000 f882 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <MX_TIM2_Init+0xe4>)
 80009b4:	f001 f982 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80009be:	f000 f86f 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <MX_TIM2_Init+0xe4>)
 80009c4:	f000 f8de 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3738      	adds	r7, #56	; 0x38
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000068 	.word	0x20000068

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_GPIO_Init+0xc0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <MX_GPIO_Init+0xc0>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_GPIO_Init+0xc0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a1e:	481e      	ldr	r0, [pc, #120]	; (8000a98 <MX_GPIO_Init+0xc4>)
 8000a20:	f000 fc92 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : in1_pin1_Pin in2_pin1_Pin in1_pin2_Pin in2_pin2_Pin */
  GPIO_InitStruct.Pin = in1_pin1_Pin|in2_pin1_Pin|in1_pin2_Pin|in2_pin2_Pin;
 8000a24:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4816      	ldr	r0, [pc, #88]	; (8000a98 <MX_GPIO_Init+0xc4>)
 8000a3e:	f000 fafb 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_Pin Right_Pin Forward_Pin Backward_Pin */
  GPIO_InitStruct.Pin = Left_Pin|Right_Pin|Forward_Pin|Backward_Pin;
 8000a42:	2378      	movs	r3, #120	; 0x78
 8000a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_GPIO_Init+0xc8>)
 8000a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <MX_GPIO_Init+0xc4>)
 8000a56:	f000 faef 	bl	8001038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2009      	movs	r0, #9
 8000a60:	f000 fab3 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a64:	2009      	movs	r0, #9
 8000a66:	f000 facc 	bl	8001002 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	200a      	movs	r0, #10
 8000a70:	f000 faab 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f000 fac4 	bl	8001002 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2017      	movs	r0, #23
 8000a80:	f000 faa3 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a84:	2017      	movs	r0, #23
 8000a86:	f000 fabc 	bl	8001002 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	10110000 	.word	0x10110000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_MspInit+0x60>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_MspInit+0x60>)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000

08000b10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <HAL_TIM_PWM_MspInit+0x34>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10b      	bne.n	8000b3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_TIM_PWM_MspInit+0x38>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_TIM_PWM_MspInit+0x38>)
 8000b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_TIM_PWM_MspInit+0x38>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40012c00 	.word	0x40012c00
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b5c:	d10b      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_TIM_Base_MspInit+0x34>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_TIM_Base_MspInit+0x34>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_TIM_Base_MspInit+0x34>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_TIM_MspPostInit+0x98>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d119      	bne.n	8000bd8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4814      	ldr	r0, [pc, #80]	; (8000c24 <HAL_TIM_MspPostInit+0xa0>)
 8000bd2:	f000 fa31 	bl	8001038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bd6:	e01c      	b.n	8000c12 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be0:	d117      	bne.n	8000c12 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6193      	str	r3, [r2, #24]
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_TIM_MspPostInit+0xa0>)
 8000c0e:	f000 fa13 	bl	8001038 <HAL_GPIO_Init>
}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010800 	.word	0x40010800

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <BusFault_Handler+0x4>

08000c46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f8ba 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c80:	2008      	movs	r0, #8
 8000c82:	f000 fb79 	bl	8001378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c8e:	2010      	movs	r0, #16
 8000c90:	f000 fb72 	bl	8001378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f000 fb6b 	bl	8001378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000ca2:	2040      	movs	r0, #64	; 0x40
 8000ca4:	f000 fb68 	bl	8001378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <SystemInit+0x5c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <SystemInit+0x5c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <SystemInit+0x5c>)
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	4911      	ldr	r1, [pc, #68]	; (8000d08 <SystemInit+0x5c>)
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <SystemInit+0x60>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <SystemInit+0x5c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <SystemInit+0x5c>)
 8000cce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <SystemInit+0x5c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SystemInit+0x5c>)
 8000cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SystemInit+0x5c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <SystemInit+0x5c>)
 8000cea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SystemInit+0x5c>)
 8000cf2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cf6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SystemInit+0x64>)
 8000cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfe:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	f8ff0000 	.word	0xf8ff0000
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d16:	e003      	b.n	8000d20 <LoopCopyDataInit>

08000d18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d1e:	3104      	adds	r1, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d20:	480a      	ldr	r0, [pc, #40]	; (8000d4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d28:	d3f6      	bcc.n	8000d18 <CopyDataInit>
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d2c:	e002      	b.n	8000d34 <LoopFillZerobss>

08000d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d30:	f842 3b04 	str.w	r3, [r2], #4

08000d34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d38:	d3f9      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d3a:	f7ff ffb7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f001 fcd9 	bl	80026f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d42:	f7ff fbe5 	bl	8000510 <main>
  bx lr
 8000d46:	4770      	bx	lr
  ldr r3, =_sidata
 8000d48:	08002794 	.word	0x08002794
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d54:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d58:	200000bc 	.word	0x200000bc

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f91f 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fe96 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f937 	bl	800101e <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f8ff 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	200000b8 	.word	0x200000b8

08000e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	200000b8 	.word	0x200000b8

08000e24 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <NVIC_EnableIRQ+0x2c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da0b      	bge.n	8000ee4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <NVIC_SetPriority+0x4c>)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 030f 	and.w	r3, r3, #15
 8000ed8:	3b04      	subs	r3, #4
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee2:	e009      	b.n	8000ef8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <NVIC_SetPriority+0x50>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff31 	bl	8000e24 <NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff46 	bl	8000e6c <NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff39 	bl	8000e88 <NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b08b      	sub	sp, #44	; 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
 800105a:	e169      	b.n	8001330 <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800105c:	2201      	movs	r2, #1
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8158 	bne.w	800132a <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a9a      	ldr	r2, [pc, #616]	; (80012e8 <HAL_GPIO_Init+0x2b0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d05e      	beq.n	8001142 <HAL_GPIO_Init+0x10a>
 8001084:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <HAL_GPIO_Init+0x2b0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d875      	bhi.n	8001176 <HAL_GPIO_Init+0x13e>
 800108a:	4a98      	ldr	r2, [pc, #608]	; (80012ec <HAL_GPIO_Init+0x2b4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d058      	beq.n	8001142 <HAL_GPIO_Init+0x10a>
 8001090:	4a96      	ldr	r2, [pc, #600]	; (80012ec <HAL_GPIO_Init+0x2b4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d86f      	bhi.n	8001176 <HAL_GPIO_Init+0x13e>
 8001096:	4a96      	ldr	r2, [pc, #600]	; (80012f0 <HAL_GPIO_Init+0x2b8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d052      	beq.n	8001142 <HAL_GPIO_Init+0x10a>
 800109c:	4a94      	ldr	r2, [pc, #592]	; (80012f0 <HAL_GPIO_Init+0x2b8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d869      	bhi.n	8001176 <HAL_GPIO_Init+0x13e>
 80010a2:	4a94      	ldr	r2, [pc, #592]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d04c      	beq.n	8001142 <HAL_GPIO_Init+0x10a>
 80010a8:	4a92      	ldr	r2, [pc, #584]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d863      	bhi.n	8001176 <HAL_GPIO_Init+0x13e>
 80010ae:	4a92      	ldr	r2, [pc, #584]	; (80012f8 <HAL_GPIO_Init+0x2c0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d046      	beq.n	8001142 <HAL_GPIO_Init+0x10a>
 80010b4:	4a90      	ldr	r2, [pc, #576]	; (80012f8 <HAL_GPIO_Init+0x2c0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d85d      	bhi.n	8001176 <HAL_GPIO_Init+0x13e>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d82a      	bhi.n	8001114 <HAL_GPIO_Init+0xdc>
 80010be:	2b12      	cmp	r3, #18
 80010c0:	d859      	bhi.n	8001176 <HAL_GPIO_Init+0x13e>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <HAL_GPIO_Init+0x90>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	08001143 	.word	0x08001143
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	0800112f 	.word	0x0800112f
 80010d4:	08001171 	.word	0x08001171
 80010d8:	08001177 	.word	0x08001177
 80010dc:	08001177 	.word	0x08001177
 80010e0:	08001177 	.word	0x08001177
 80010e4:	08001177 	.word	0x08001177
 80010e8:	08001177 	.word	0x08001177
 80010ec:	08001177 	.word	0x08001177
 80010f0:	08001177 	.word	0x08001177
 80010f4:	08001177 	.word	0x08001177
 80010f8:	08001177 	.word	0x08001177
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001177 	.word	0x08001177
 8001104:	08001177 	.word	0x08001177
 8001108:	08001177 	.word	0x08001177
 800110c:	08001125 	.word	0x08001125
 8001110:	08001139 	.word	0x08001139
 8001114:	4a79      	ldr	r2, [pc, #484]	; (80012fc <HAL_GPIO_Init+0x2c4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111a:	e02c      	b.n	8001176 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e029      	b.n	8001178 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	3304      	adds	r3, #4
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e024      	b.n	8001178 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	3308      	adds	r3, #8
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e01f      	b.n	8001178 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	330c      	adds	r3, #12
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e01a      	b.n	8001178 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800114a:	2304      	movs	r3, #4
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e013      	b.n	8001178 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d105      	bne.n	8001164 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001158:	2308      	movs	r3, #8
 800115a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	611a      	str	r2, [r3, #16]
          break;
 8001162:	e009      	b.n	8001178 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001164:	2308      	movs	r3, #8
 8001166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	615a      	str	r2, [r3, #20]
          break;
 800116e:	e003      	b.n	8001178 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x140>
          break;
 8001176:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d801      	bhi.n	8001182 <HAL_GPIO_Init+0x14a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e001      	b.n	8001186 <HAL_GPIO_Init+0x14e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3304      	adds	r3, #4
 8001186:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2bff      	cmp	r3, #255	; 0xff
 800118c:	d802      	bhi.n	8001194 <HAL_GPIO_Init+0x15c>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x162>
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3b08      	subs	r3, #8
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	210f      	movs	r1, #15
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	6a39      	ldr	r1, [r7, #32]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80b1 	beq.w	800132a <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1fc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a3f      	ldr	r2, [pc, #252]	; (800130c <HAL_GPIO_Init+0x2d4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1f8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3e      	ldr	r2, [pc, #248]	; (8001310 <HAL_GPIO_Init+0x2d8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1f4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3d      	ldr	r2, [pc, #244]	; (8001314 <HAL_GPIO_Init+0x2dc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1f0>
 8001224:	2303      	movs	r3, #3
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1fe>
 8001228:	2304      	movs	r3, #4
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x1fe>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x1fe>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x1fe>
 8001234:	2300      	movs	r3, #0
 8001236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4313      	orrs	r3, r2
 8001244:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001246:	492f      	ldr	r1, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	492c      	ldr	r1, [pc, #176]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4928      	ldr	r1, [pc, #160]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 8001278:	4013      	ands	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4922      	ldr	r1, [pc, #136]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	491e      	ldr	r1, [pc, #120]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	4918      	ldr	r1, [pc, #96]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4914      	ldr	r1, [pc, #80]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d021      	beq.n	800131c <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_GPIO_Init+0x2e0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60cb      	str	r3, [r1, #12]
 80012e4:	e021      	b.n	800132a <HAL_GPIO_Init+0x2f2>
 80012e6:	bf00      	nop
 80012e8:	10320000 	.word	0x10320000
 80012ec:	10310000 	.word	0x10310000
 80012f0:	10220000 	.word	0x10220000
 80012f4:	10210000 	.word	0x10210000
 80012f8:	10120000 	.word	0x10120000
 80012fc:	10110000 	.word	0x10110000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40011000 	.word	0x40011000
 8001314:	40011400 	.word	0x40011400
 8001318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_GPIO_Init+0x30c>)
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <HAL_GPIO_Init+0x30c>)
 8001326:	4013      	ands	r3, r2
 8001328:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae92 	bls.w	800105c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	372c      	adds	r7, #44	; 0x2c
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8fa 	bl	8000590 <HAL_GPIO_EXTI_Callback>
  }
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8087 	beq.w	80014d0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013c2:	4b92      	ldr	r3, [pc, #584]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d00c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ce:	4b8f      	ldr	r3, [pc, #572]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d112      	bne.n	8001400 <HAL_RCC_OscConfig+0x58>
 80013da:	4b8c      	ldr	r3, [pc, #560]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e6:	d10b      	bne.n	8001400 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b88      	ldr	r3, [pc, #544]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d06c      	beq.n	80014ce <HAL_RCC_OscConfig+0x126>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d168      	bne.n	80014ce <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e22d      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x70>
 800140a:	4b80      	ldr	r3, [pc, #512]	; (800160c <HAL_RCC_OscConfig+0x264>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7f      	ldr	r2, [pc, #508]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e02e      	b.n	8001476 <HAL_RCC_OscConfig+0xce>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x92>
 8001420:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a79      	ldr	r2, [pc, #484]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b77      	ldr	r3, [pc, #476]	; (800160c <HAL_RCC_OscConfig+0x264>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a76      	ldr	r2, [pc, #472]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e01d      	b.n	8001476 <HAL_RCC_OscConfig+0xce>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0xb6>
 8001444:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a70      	ldr	r2, [pc, #448]	; (800160c <HAL_RCC_OscConfig+0x264>)
 800144a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b6e      	ldr	r3, [pc, #440]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a6d      	ldr	r2, [pc, #436]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e00b      	b.n	8001476 <HAL_RCC_OscConfig+0xce>
 800145e:	4b6b      	ldr	r3, [pc, #428]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6a      	ldr	r2, [pc, #424]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_OscConfig+0x264>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a67      	ldr	r2, [pc, #412]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d013      	beq.n	80014a6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fcc7 	bl	8000e10 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001486:	f7ff fcc3 	bl	8000e10 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e1e1      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001498:	4b5c      	ldr	r3, [pc, #368]	; (800160c <HAL_RCC_OscConfig+0x264>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0xde>
 80014a4:	e014      	b.n	80014d0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fcb3 	bl	8000e10 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ae:	f7ff fcaf 	bl	8000e10 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b64      	cmp	r3, #100	; 0x64
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e1cd      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c0:	4b52      	ldr	r3, [pc, #328]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x106>
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d063      	beq.n	80015a4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014dc:	4b4b      	ldr	r3, [pc, #300]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00b      	beq.n	8001500 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014e8:	4b48      	ldr	r3, [pc, #288]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d11c      	bne.n	800152e <HAL_RCC_OscConfig+0x186>
 80014f4:	4b45      	ldr	r3, [pc, #276]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x170>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e1a1      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <HAL_RCC_OscConfig+0x264>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4939      	ldr	r1, [pc, #228]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152c:	e03a      	b.n	80015a4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d020      	beq.n	8001578 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_OscConfig+0x268>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc68 	bl	8000e10 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001544:	f7ff fc64 	bl	8000e10 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e182      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4926      	ldr	r1, [pc, #152]	; (800160c <HAL_RCC_OscConfig+0x264>)
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
 8001576:	e015      	b.n	80015a4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_RCC_OscConfig+0x268>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fc47 	bl	8000e10 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fc43 	bl	8000e10 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e161      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_RCC_OscConfig+0x264>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d039      	beq.n	8001624 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d019      	beq.n	80015ec <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fc27 	bl	8000e10 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fc23 	bl	8000e10 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e141      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_RCC_OscConfig+0x264>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 facb 	bl	8001b80 <RCC_Delay>
 80015ea:	e01b      	b.n	8001624 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fc0d 	bl	8000e10 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	e00e      	b.n	8001618 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fc09 	bl	8000e10 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d907      	bls.n	8001618 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e127      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
 800160c:	40021000 	.word	0x40021000
 8001610:	42420000 	.word	0x42420000
 8001614:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b92      	ldr	r3, [pc, #584]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ea      	bne.n	80015fa <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80a6 	beq.w	800177e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b8b      	ldr	r3, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10d      	bne.n	800165e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a87      	ldr	r2, [pc, #540]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800165a:	2301      	movs	r3, #1
 800165c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <HAL_RCC_OscConfig+0x4c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d118      	bne.n	800169c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166a:	4b7f      	ldr	r3, [pc, #508]	; (8001868 <HAL_RCC_OscConfig+0x4c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7e      	ldr	r2, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x4c0>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001676:	f7ff fbcb 	bl	8000e10 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167e:	f7ff fbc7 	bl	8000e10 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0e5      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	4b75      	ldr	r3, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x4c0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x30a>
 80016a4:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e02d      	b.n	800170e <HAL_RCC_OscConfig+0x366>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x32c>
 80016ba:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a69      	ldr	r2, [pc, #420]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a66      	ldr	r2, [pc, #408]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	e01c      	b.n	800170e <HAL_RCC_OscConfig+0x366>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x34e>
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a60      	ldr	r2, [pc, #384]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a5d      	ldr	r2, [pc, #372]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e00b      	b.n	800170e <HAL_RCC_OscConfig+0x366>
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a57      	ldr	r2, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001708:	f023 0304 	bic.w	r3, r3, #4
 800170c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d015      	beq.n	8001742 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff fb7b 	bl	8000e10 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fb77 	bl	8000e10 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e093      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ee      	beq.n	800171e <HAL_RCC_OscConfig+0x376>
 8001740:	e014      	b.n	800176c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fb65 	bl	8000e10 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fb61 	bl	8000e10 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e07d      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	4b40      	ldr	r3, [pc, #256]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ee      	bne.n	800174a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d069      	beq.n	800185a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d061      	beq.n	8001856 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d146      	bne.n	8001828 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x4c4>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb36 	bl	8000e10 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fb32 	bl	8000e10 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e050      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d108      	bne.n	80017e2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4921      	ldr	r1, [pc, #132]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a19      	ldr	r1, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	430b      	orrs	r3, r1
 80017f4:	491b      	ldr	r1, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb06 	bl	8000e10 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb02 	bl	8000e10 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e020      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x460>
 8001826:	e018      	b.n	800185a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x4c4>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff faef 	bl	8000e10 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff faeb 	bl	8000e10 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e009      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x4bc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x48e>
 8001854:	e001      	b.n	800185a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
 800186c:	42420060 	.word	0x42420060

08001870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800187e:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d910      	bls.n	80018ae <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188c:	4b7a      	ldr	r3, [pc, #488]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0207 	bic.w	r2, r3, #7
 8001894:	4978      	ldr	r1, [pc, #480]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800189c:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0e0      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d020      	beq.n	80018fc <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c6:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a6c      	ldr	r2, [pc, #432]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80018cc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018d0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a66      	ldr	r2, [pc, #408]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80018e4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	4961      	ldr	r1, [pc, #388]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d06a      	beq.n	80019de <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d107      	bne.n	8001920 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001910:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d115      	bne.n	8001948 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0a7      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d107      	bne.n	8001938 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e09b      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e093      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001948:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 0203 	bic.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4949      	ldr	r1, [pc, #292]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800195a:	f7ff fa59 	bl	8000e10 <HAL_GetTick>
 800195e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d112      	bne.n	800198e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7ff fa51 	bl	8000e10 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e077      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001980:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b04      	cmp	r3, #4
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_ClockConfig+0xfa>
 800198c:	e027      	b.n	80019de <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d11d      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff fa3a 	bl	8000e10 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e060      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d1ee      	bne.n	8001998 <HAL_RCC_ClockConfig+0x128>
 80019ba:	e010      	b.n	80019de <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff fa28 	bl	8000e10 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e04e      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ee      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d210      	bcs.n	8001a0e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 0207 	bic.w	r2, r3, #7
 80019f4:	4920      	ldr	r1, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_ClockConfig+0x208>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e030      	b.n	8001a70 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4915      	ldr	r1, [pc, #84]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	490d      	ldr	r1, [pc, #52]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4c:	f000 f81c 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x20c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	4908      	ldr	r1, [pc, #32]	; (8001a80 <HAL_RCC_ClockConfig+0x210>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_RCC_ClockConfig+0x214>)
 8001a66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff f98f 	bl	8000d8c <HAL_InitTick>
  
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08002774 	.word	0x08002774
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b490      	push	{r4, r7}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a90:	1d3c      	adds	r4, r7, #4
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a98:	f240 2301 	movw	r3, #513	; 0x201
 8001a9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x46>
 8001ac6:	e02b      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aca:	623b      	str	r3, [r7, #32]
      break;
 8001acc:	e02b      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	0c9b      	lsrs	r3, r3, #18
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3328      	adds	r3, #40	; 0x28
 8001ad8:	443b      	add	r3, r7
 8001ada:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ade:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d012      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	0c5b      	lsrs	r3, r3, #17
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	443b      	add	r3, r7
 8001af8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001afc:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b02:	fb03 f202 	mul.w	r2, r3, r2
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e004      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	623b      	str	r3, [r7, #32]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b22:	623b      	str	r3, [r7, #32]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc90      	pop	{r4, r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	08002764 	.word	0x08002764
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	007a1200 	.word	0x007a1200
 8001b40:	003d0900 	.word	0x003d0900

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b5c:	f7ff fff2 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	0adb      	lsrs	r3, r3, #11
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	08002784 	.word	0x08002784

08001b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <RCC_Delay+0x38>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <RCC_Delay+0x3c>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0a5b      	lsrs	r3, r3, #9
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001b9c:	bf00      	nop
}
 8001b9e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1e5a      	subs	r2, r3, #1
 8001ba4:	60fa      	str	r2, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f8      	bne.n	8001b9c <RCC_Delay+0x1c>
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e01d      	b.n	8001c0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7fe ffb0 	bl	8000b4c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 fa0e 	bl	8002020 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e01d      	b.n	8001c64 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7fe ff67 	bl	8000b10 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3304      	adds	r3, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f000 f9e3 	bl	8002020 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fc79 	bl	8002576 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_TIM_PWM_Start+0x4c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d107      	bne.n	8001c9e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40012c00 	.word	0x40012c00

08001cbc <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0b4      	b.n	8001e40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	f200 809f 	bhi.w	8001e2c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d29 	.word	0x08001d29
 8001cf8:	08001e2d 	.word	0x08001e2d
 8001cfc:	08001e2d 	.word	0x08001e2d
 8001d00:	08001e2d 	.word	0x08001e2d
 8001d04:	08001d69 	.word	0x08001d69
 8001d08:	08001e2d 	.word	0x08001e2d
 8001d0c:	08001e2d 	.word	0x08001e2d
 8001d10:	08001e2d 	.word	0x08001e2d
 8001d14:	08001dab 	.word	0x08001dab
 8001d18:	08001e2d 	.word	0x08001e2d
 8001d1c:	08001e2d 	.word	0x08001e2d
 8001d20:	08001e2d 	.word	0x08001e2d
 8001d24:	08001deb 	.word	0x08001deb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f9dc 	bl	80020ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0208 	orr.w	r2, r2, #8
 8001d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6999      	ldr	r1, [r3, #24]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	619a      	str	r2, [r3, #24]
    }
    break;
 8001d66:	e062      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fa28 	bl	80021c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6999      	ldr	r1, [r3, #24]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	021a      	lsls	r2, r3, #8
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	619a      	str	r2, [r3, #24]
    }
    break;
 8001da8:	e041      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fa77 	bl	80022a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0208 	orr.w	r2, r2, #8
 8001dc4:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0204 	bic.w	r2, r2, #4
 8001dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69d9      	ldr	r1, [r3, #28]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	61da      	str	r2, [r3, #28]
    }
    break;
 8001de8:	e021      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fac7 	bl	8002384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e04:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69d9      	ldr	r1, [r3, #28]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	021a      	lsls	r2, r3, #8
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	61da      	str	r2, [r3, #28]
    }
    break;
 8001e2a:	e000      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001e2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_TIM_ConfigClockSource+0x1c>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e0d8      	b.n	8002016 <HAL_TIM_ConfigClockSource+0x1ce>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9c:	d052      	beq.n	8001f44 <HAL_TIM_ConfigClockSource+0xfc>
 8001e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea2:	f200 80ae 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eaa:	d027      	beq.n	8001efc <HAL_TIM_ConfigClockSource+0xb4>
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	f200 80a7 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001eb4:	2b70      	cmp	r3, #112	; 0x70
 8001eb6:	d02a      	beq.n	8001f0e <HAL_TIM_ConfigClockSource+0xc6>
 8001eb8:	2b70      	cmp	r3, #112	; 0x70
 8001eba:	f200 80a2 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001ebe:	2b60      	cmp	r3, #96	; 0x60
 8001ec0:	d063      	beq.n	8001f8a <HAL_TIM_ConfigClockSource+0x142>
 8001ec2:	2b60      	cmp	r3, #96	; 0x60
 8001ec4:	f200 809d 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001ec8:	2b50      	cmp	r3, #80	; 0x50
 8001eca:	d04e      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0x122>
 8001ecc:	2b50      	cmp	r3, #80	; 0x50
 8001ece:	f200 8098 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001ed2:	2b40      	cmp	r3, #64	; 0x40
 8001ed4:	d069      	beq.n	8001faa <HAL_TIM_ConfigClockSource+0x162>
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	f200 8093 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001edc:	2b30      	cmp	r3, #48	; 0x30
 8001ede:	f000 8089 	beq.w	8001ff4 <HAL_TIM_ConfigClockSource+0x1ac>
 8001ee2:	2b30      	cmp	r3, #48	; 0x30
 8001ee4:	f200 808d 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d07c      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x19e>
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f200 8088 	bhi.w	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d069      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0x182>
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d06e      	beq.n	8001fd8 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001efa:	e082      	b.n	8002002 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0207 	bic.w	r2, r2, #7
 8001f0a:	609a      	str	r2, [r3, #8]
    break;
 8001f0c:	e07a      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6899      	ldr	r1, [r3, #8]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f000 fb09 	bl	8002534 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	609a      	str	r2, [r3, #8]
    break;
 8001f42:	e05f      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f000 faee 	bl	8002534 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f66:	609a      	str	r2, [r3, #8]
    break;
 8001f68:	e04c      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f000 fa58 	bl	800242c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2150      	movs	r1, #80	; 0x50
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fab7 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8001f88:	e03c      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6859      	ldr	r1, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f000 fa7a 	bl	8002490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2160      	movs	r1, #96	; 0x60
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 faa7 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8001fa8:	e02c      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f000 fa38 	bl	800242c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2140      	movs	r1, #64	; 0x40
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fa97 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8001fc8:	e01c      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fa90 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8001fd6:	e015      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2110      	movs	r1, #16
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fa89 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8001fe4:	e00e      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2120      	movs	r1, #32
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fa82 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8001ff2:	e007      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2130      	movs	r1, #48	; 0x30
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fa7b 	bl	80024f6 <TIM_ITRx_SetConfig>
    break;
 8002000:	e000      	b.n	8002004 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8002002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <TIM_Base_SetConfig+0xc0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00b      	beq.n	8002054 <TIM_Base_SetConfig+0x34>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002042:	d007      	beq.n	8002054 <TIM_Base_SetConfig+0x34>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <TIM_Base_SetConfig+0xc4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x34>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <TIM_Base_SetConfig+0xc8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <TIM_Base_SetConfig+0xc0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0x66>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0x66>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <TIM_Base_SetConfig+0xc4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0x66>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <TIM_Base_SetConfig+0xc8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800209e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <TIM_Base_SetConfig+0xc0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d103      	bne.n	80020d0 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	615a      	str	r2, [r3, #20]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800

080020ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f023 0201 	bic.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f023 0302 	bic.w	r3, r3, #2
 8002140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <TIM_OC1_SetConfig+0xd4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10c      	bne.n	800216e <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0308 	bic.w	r3, r3, #8
 800215a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <TIM_OC1_SetConfig+0xd4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d111      	bne.n	800219a <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800217c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	621a      	str	r2, [r3, #32]
}
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40012c00 	.word	0x40012c00

080021c4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f023 0210 	bic.w	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0320 	bic.w	r3, r3, #32
 800221a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <TIM_OC2_SetConfig+0xdc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10d      	bne.n	800224c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800224a:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <TIM_OC2_SetConfig+0xdc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d113      	bne.n	800227c <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800225a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	621a      	str	r2, [r3, #32]
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40012c00 	.word	0x40012c00

080022a4 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <TIM_OC3_SetConfig+0xdc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002328:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <TIM_OC3_SetConfig+0xdc>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d113      	bne.n	800235a <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	621a      	str	r2, [r3, #32]
}
 8002374:	bf00      	nop
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40012c00 	.word	0x40012c00

08002384 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023be:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023da:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	031b      	lsls	r3, r3, #12
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <TIM_OC4_SetConfig+0xa4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d109      	bne.n	8002404 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	621a      	str	r2, [r3, #32]
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	40012c00 	.word	0x40012c00

0800242c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	f023 0201 	bic.w	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f023 030a 	bic.w	r3, r3, #10
 8002470:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	621a      	str	r2, [r3, #32]
}
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 0210 	bic.w	r2, r3, #16
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	f043 0307 	orr.w	r3, r3, #7
 800251a:	b29b      	uxth	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	609a      	str	r2, [r3, #8]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	021a      	lsls	r2, r3, #8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	431a      	orrs	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002576:	b480      	push	{r7}
 8002578:	b087      	sub	sp, #28
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002586:	2201      	movs	r2, #1
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a1a      	ldr	r2, [r3, #32]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	43db      	mvns	r3, r3
 8002598:	401a      	ands	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	621a      	str	r2, [r3, #32]
}
 80025b0:	bf00      	nop
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e044      	b.n	8002660 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800267e:	2302      	movs	r3, #2
 8002680:	e032      	b.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80026a0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6899      	ldr	r1, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
	...

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	2600      	movs	r6, #0
 80026f8:	4d0c      	ldr	r5, [pc, #48]	; (800272c <__libc_init_array+0x38>)
 80026fa:	4c0d      	ldr	r4, [pc, #52]	; (8002730 <__libc_init_array+0x3c>)
 80026fc:	1b64      	subs	r4, r4, r5
 80026fe:	10a4      	asrs	r4, r4, #2
 8002700:	42a6      	cmp	r6, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	f000 f822 	bl	800274c <_init>
 8002708:	2600      	movs	r6, #0
 800270a:	4d0a      	ldr	r5, [pc, #40]	; (8002734 <__libc_init_array+0x40>)
 800270c:	4c0a      	ldr	r4, [pc, #40]	; (8002738 <__libc_init_array+0x44>)
 800270e:	1b64      	subs	r4, r4, r5
 8002710:	10a4      	asrs	r4, r4, #2
 8002712:	42a6      	cmp	r6, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	f855 3b04 	ldr.w	r3, [r5], #4
 800271c:	4798      	blx	r3
 800271e:	3601      	adds	r6, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	f855 3b04 	ldr.w	r3, [r5], #4
 8002726:	4798      	blx	r3
 8002728:	3601      	adds	r6, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	0800278c 	.word	0x0800278c
 8002730:	0800278c 	.word	0x0800278c
 8002734:	0800278c 	.word	0x0800278c
 8002738:	08002790 	.word	0x08002790

0800273c <memset>:
 800273c:	4603      	mov	r3, r0
 800273e:	4402      	add	r2, r0
 8002740:	4293      	cmp	r3, r2
 8002742:	d100      	bne.n	8002746 <memset+0xa>
 8002744:	4770      	bx	lr
 8002746:	f803 1b01 	strb.w	r1, [r3], #1
 800274a:	e7f9      	b.n	8002740 <memset+0x4>

0800274c <_init>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr

08002758 <_fini>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr
